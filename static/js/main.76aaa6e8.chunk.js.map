{"version":3,"sources":["common/ThemeProvider/index.tsx","components/AppBar/index.tsx","components/SuggestionList/index.tsx","components/LinkInterceptor.tsx","hooks/useLongPress.ts","services/util.ts","models/IApiResponse.ts","constants.ts","common/WordSpeaker/WordSpeaker.tsx","components/WordPopup/WordPopup.tsx","services/trackingService.ts","services/api.ts","components/LiveSearch/LiveSearch.tsx","hooks/useTracking.ts","hooks/useSpeechInput.ts","services/autoCompleteService.ts","containers/Home.tsx","hooks/useAutoComplete.ts","hooks/useDebounce.ts","common/App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","Theme","children","CssBaseline","ThemeProvider","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","SuggestionList","suggests","setKeyword","search","classes","useStyles","successtionBox","paddingTop","length","Box","className","suggestList","Divider","component","style","marginTop","List","map","item","ListItem","key","word","button","onClick","ListItemIcon","ListItemText","primary","makeStyles","backgroundColor","palette","background","paper","spacing","LinkInterceptor","html","onLinkClick","onWordClick","ref","useRef","listeners","wordDdCLickHandle","useCallback","text","doc","document","window","getSelection","toString","selection","type","createRange","longPressHandler","callback","ms","useState","startLongPress","setStartLongPress","useEffect","timerId","setTimeout","clearTimeout","start","stop","onMouseDown","onMouseUp","onMouseLeave","onTouchStart","onTouchEnd","useLongPress","current","push","addEventListener","Array","from","querySelectorAll","forEach","node","removeEventListener","dangerouslySetInnerHTML","__html","toProperCase","input","toUpperCase","substr","isUrlExist","url","a","fetch","method","res","ok","console","log","findPossibleWord","similars","ApiResponseTypes","constants","RESOURCE_URL","process","REACT_APP_RESOURCE_URL","DATA_SOURCE_ID","TRACKING_SERVICE_URL","WORD_LIST_URL","createStyles","speakButton","marginLeft","WordSpeaker","noStyle","accents","sounds","setSounds","verifyExistingResource","items","toLocaleLowerCase","Chip","clickable","disabled","accent","Audio","play","playSound","icon","label","appBar","title","flex","innerBox","padding","WordPopup","onClose","Transition","React","forwardRef","props","Slide","direction","Dialog","fullScreen","innerWidth","open","TransitionComponent","pronounce","content","e","preventDefault","sendTrack","mean","mode","body","JSON","stringify","fetchWord","source","result","resultType","Success","trim","response","replace","data","parse","Object","keys","Error","suggestions","errorMessage","liveSearchWord","margin","liveSearchContainer","LiveSearch","error","setError","loading","setLoading","trackData","setTrackData","now","moment","utc","startOf","format","firebase","on","snapshot","val","off","err","useTracking","Grid","Zoom","in","size","CircularProgress","w","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","recognition","useSpeechInput","onVoiceInput","onVoiceStarted","isBrowserSupportSpeech","undefined","inputValue","setInputValue","started","setStarted","voiceCallback","continuous","interimResults","lang","onresult","results","transcript","onaudiostart","onend","onerror","startVoiceInput","fuse","isReady","options","this","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","json","Fuse","x","slice","root","display","alignItems","width","iconButton","divider","height","container","snackbar","dark","autoComplete","Home","localStorage","getItem","history","useHistory","sourceId","setSourceId","setData","popupWord","setPopupWord","keyword","suggestionList","setSuggestionList","setType","message","setMessage","useParams","liveSearch","setLiveSearch","autoCompleteItems","setAutoCompleteItems","autoCompleteLoading","setAutoCompleteLoading","Date","getTime","autoCompleteService","getAutocomplete","useAutocomplete","value","delay","debouncedValue","setDebouncedValue","handler","useDebounce","inputKeyword","scrollTo","top","onVoiceResultCb","voiceStartedCB","clickedWord","en_vn","dict","anchorEl","setAnchorEl","handleClose","some","setItem","Fragment","sm","xs","onSubmit","Paper","event","currentTarget","keepMounted","Boolean","MenuItem","InputBase","onChange","target","placeholder","inputProps","orientation","ToggleButtonGroup","exclusive","dictType","float","ToggleButton","Link","href","arr","split","SnackbarContent","cursor","action","App","basename","Container","fixed","path","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initialize","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76aaa6e8.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\r\n\r\nconst theme = createMuiTheme()\r\n\r\nconst Theme: React.FC = ({ children }) => {\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <ThemeProvider theme={theme}>\r\n        {children}\r\n      </ThemeProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Theme\r\n\r\n\r\n\r\n","import React from \"react\"\r\n\r\nimport MuiAppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook'\r\n\r\nconst AppBar: React.FC = () => {\r\n  return (\r\n    <MuiAppBar position=\"static\">\r\n      <Toolbar>\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n          <MenuBookIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\">Vietnamese - English open dictionary</Typography>\r\n      </Toolbar>\r\n    </MuiAppBar>\r\n  )\r\n}\r\n\r\nexport default AppBar","import React from 'react'\r\n\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\r\n\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport List from \"@material-ui/core/List\"\r\nimport ListItem from \"@material-ui/core/ListItem\"\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\"\r\nimport ListItemText from \"@material-ui/core/ListItemText\"\r\nimport LabelImportantIcon from \"@material-ui/icons/LabelImportant\"\r\nimport { Box, Divider } from '@material-ui/core'\r\n\r\ninterface SuggestionListProps {\r\n  suggests: any[],\r\n  setKeyword?: any\r\n  search?: any\r\n}\r\n\r\nconst SuggestionList: React.FC<SuggestionListProps> = ({ suggests, setKeyword, search }) => {\r\n  const classes = useStyles({ successtionBox: {paddingTop: \"25px\"}})\r\n \r\n  return suggests && suggests.length >0 && (\r\n    <Box className= {classes.suggestList}>\r\n      <Divider/>\r\n      <Typography variant=\"h3\" component=\"h5\" style={{marginTop:\"25px\"}}>\r\n        Từ liên quan:\r\n      </Typography>\r\n      <List\r\n        component=\"nav\"\r\n        aria-label=\"contacts\"\r\n      >\r\n        {suggests.map((item: any) => (\r\n          <ListItem\r\n            key={item.word}\r\n            button\r\n            onClick={() => {\r\n              setKeyword(item.word)\r\n              search(item.word)\r\n            }}\r\n          >\r\n            <ListItemIcon>\r\n              <LabelImportantIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary={item.word} color=\"primary\" />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default SuggestionList\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  suggestList: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    marginTop: theme.spacing(5)\r\n  }\r\n}))","import React, { useEffect, useRef, useCallback } from 'react'\r\nimport { Typography } from '@material-ui/core'\r\nimport useLongPress from \"hooks/useLongPress\";\r\nexport interface IInterceptionProps {\r\n  html: string;\r\n  onLinkClick: (e: any) => any;\r\n  onWordClick?: (e: string) => void;\r\n}\r\nexport function LinkInterceptor({ html, onLinkClick, onWordClick }: IInterceptionProps) {\r\n  const ref = useRef(null)\r\n  const listeners = useRef([])\r\n  const wordDdCLickHandle = useCallback(() => {\r\n    let text = \"\";\r\n    const doc = document as any;\r\n\r\n    if (window.getSelection) {\r\n      text = window.getSelection().toString();\r\n    } else if (doc.selection && doc.selection.type !== \"Control\") {\r\n      text = doc.selection.createRange().text;\r\n    }\r\n    if (text && onWordClick) {\r\n      onWordClick(text);\r\n    }\r\n  }, [onWordClick]);\r\n  const longPressHandler = useLongPress(() => {\r\n    wordDdCLickHandle();\r\n  }, 1000)\r\n\r\n  useEffect(\r\n    () => {\r\n      listeners.current.push(ref.current);\r\n      ref.current.addEventListener(\"dblclick\", wordDdCLickHandle)\r\n      const links: HTMLElement[] = Array.from(ref.current.querySelectorAll('a'))\r\n      links.forEach(node => {\r\n        node.addEventListener('click', onLinkClick)\r\n        listeners.current.push(node)\r\n      })\r\n\r\n      return () => {\r\n        listeners.current.forEach(node => {\r\n          node.removeEventListener('click', onLinkClick);\r\n          node.removeEventListener('dblclick', wordDdCLickHandle);\r\n        });\r\n        listeners.current = []\r\n      }\r\n    },\r\n    [html, onLinkClick, onWordClick, wordDdCLickHandle]\r\n  )\r\n\r\n  return <Typography {...longPressHandler} ref={ref} variant=\"body1\" component=\"article\" dangerouslySetInnerHTML={{ __html: html }}></Typography>\r\n}","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport default function useLongPress(callback = () => { }, ms = 300) {\r\n  const [startLongPress, setStartLongPress] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let timerId: any;\r\n    if (startLongPress) {\r\n      timerId = setTimeout(callback, ms);\r\n    } else {\r\n      clearTimeout(timerId);\r\n    }\r\n\r\n    return () => {\r\n      clearTimeout(timerId);\r\n    };\r\n    // eslint-disable-next-line\r\n  }, [startLongPress]);\r\n\r\n  const start = useCallback(() => {\r\n    setStartLongPress(true);\r\n  }, []);\r\n  const stop = useCallback(() => {\r\n    setStartLongPress(false);\r\n  }, []);\r\n\r\n  return {\r\n\r\n    onMouseDown: start,\r\n    onMouseUp: stop,\r\n    onMouseLeave: stop,\r\n    onTouchStart: start,\r\n    onTouchEnd: stop,\r\n  };\r\n}","\r\nexport function toProperCase(input: string) {\r\n  if (!input) return null;\r\n  input = input[0].toUpperCase() + input.substr(1);\r\n  return input;\r\n}\r\n\r\nexport async function isUrlExist(url: string) {\r\n  try {\r\n    const res = await fetch(url, { method: 'HEAD' });\r\n    if (res && res.ok) {\r\n      return true;\r\n    }\r\n  }\r\n  catch (err) {\r\n    console.log(err);\r\n  };\r\n  return false;\r\n}\r\nexport function findPossibleWord(word: string){\r\n  const similars = [];\r\n  // remove s at the end\r\n  if(word[word.length-1] === 's') {\r\n    similars.push(word.substr(0,word.length -1))\r\n  }\r\n  return similars;\r\n}","export enum ApiResponseTypes {\r\n  Success = \"success\",\r\n  Error = \"error\"\r\n}\r\nexport interface IApiResponse<T> {\r\n  data?: T\r\n  resultType: ApiResponseTypes,\r\n  errorMessage?: string;\r\n  suggestions?: string[];\r\n}","export const constants = {\r\n  RESOURCE_URL: process.env.REACT_APP_RESOURCE_URL || \"https://data.en2vi.com/\",\r\n  DATA_SOURCE_ID: [\"data\", \"html\"],\r\n  TRACKING_SERVICE_URL: \"https://us-central1-vndict-http.cloudfunctions.net/track\",\r\n  WORD_LIST_URL: \"/words_dictionary.json\"\r\n}\r\nexport default constants;","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Box, Chip, makeStyles, Theme, createStyles } from \"@material-ui/core\";\r\nimport VolumeDownIcon from \"@material-ui/icons/VolumeDown\";\r\n// import VolumeUpIcon from \"@material-ui/icons/VolumeUp\";\r\nimport { constants } from \"../../constants\";\r\nimport { isUrlExist } from \"services/util\";\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    speakButton: {\r\n      marginLeft: theme.spacing(3)\r\n    }\r\n  })\r\n);\r\nexport interface IWordSpeakerProps {\r\n  word: string;\r\n  accents?: string[];\r\n  noStyle?: boolean;\r\n}\r\nexport const WordSpeaker: React.FC<IWordSpeakerProps> = ({ noStyle, word, accents }) => {\r\n  const classes = useStyles({});\r\n  const initialSound: { [x: string]: string } = {}\r\n  const [sounds, setSounds] = useState(initialSound);\r\n  //TODO : Fix the react warning, somehow it complaint about accents\r\n  const verifyExistingResource = useCallback(async () => {\r\n    const items: { [x: string]: string } = {};\r\n    if (word) {\r\n      for (const item of accents) {\r\n        const url = `${constants.RESOURCE_URL}/voice/${word.toLocaleLowerCase()}_${item}.mp3`;\r\n        const existed = await isUrlExist(url);\r\n        if (existed) {\r\n          items[item] = url;\r\n        }\r\n      }\r\n    }\r\n    setSounds(items);\r\n    // eslint-disable-next-line\r\n  }, [word])\r\n  useEffect(() => {\r\n    verifyExistingResource();\r\n  }, [verifyExistingResource]);\r\n  const playSound = (accent?: \"us\" | \"uk\") => {\r\n    const url = `${constants.RESOURCE_URL}/voice/${word.toLocaleLowerCase()}_${accent}.mp3`;\r\n    const audio = new Audio(url);\r\n    audio.play();\r\n  };\r\n  return (\r\n    <Box className=\"float-right\">\r\n      {accents.map((a) =>\r\n        <Chip key={a}\r\n          className={classes.speakButton}\r\n          clickable={sounds[a] != null}\r\n          disabled={!sounds[a]}\r\n          color={(!noStyle && a === \"us\") ? \"secondary\" : \"primary\"}\r\n          onClick={() => playSound(a as \"uk\" | \"us\")}\r\n          icon={<VolumeDownIcon />}\r\n          label={a.toUpperCase()}\r\n        />\r\n      )}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default WordSpeaker;","import {\r\n  Dialog, AppBar, Toolbar, IconButton, Typography,\r\n  makeStyles, Theme, createStyles, Slide, Box\r\n} from \"@material-ui/core\";\r\n\r\nimport React from \"react\";\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport { LinkInterceptor } from \"components/LinkInterceptor\";\r\nimport { toProperCase } from \"services/util\";\r\nimport WordSpeaker from \"common/WordSpeaker/WordSpeaker\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    appBar: {\r\n      position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n    innerBox: {\r\n      padding: theme.spacing(2)\r\n    }\r\n  }),\r\n);\r\n\r\nexport const WordPopup: React.FC<{ word: any, onClose: () => void }> = ({ word, onClose }) => {\r\n  const classes = useStyles({});\r\n  const Transition = React.forwardRef<unknown, TransitionProps>(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n  const handleClose = () => onClose();\r\n  if (!word) return null;\r\n\r\n  return (\r\n    <Dialog fullScreen={window.innerWidth < 667} open={word != null} onClose={() => { }} TransitionComponent={Transition}>\r\n      <AppBar className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n            <CloseIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            {toProperCase(word.word)} {word.pronounce && <span> - {word.pronounce}</span>}\r\n          </Typography>\r\n          <WordSpeaker word={word.word} accents={[\"us\", \"uk\"]} noStyle={true}></WordSpeaker>\r\n        </Toolbar>\r\n      </AppBar>\r\n        <Box className={classes.innerBox}>\r\n          <LinkInterceptor\r\n            html={word.content}\r\n            onLinkClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\r\n              e.preventDefault();\r\n            }}></LinkInterceptor>\r\n        </Box>\r\n    </Dialog>\r\n      )\r\n}","import constants from \"../constants\";\r\n\r\nexport async function sendTrack(word: string, mean?: string) {\r\n    mean = mean|| word;\r\n    try{\r\n    await fetch(constants.TRACKING_SERVICE_URL, {method: \"POST\", mode:\"no-cors\", body: JSON.stringify({word, mean})});\r\n    }catch(err) {\r\n        console.log(err)\r\n    }\r\n}","import { IApiResponse, ApiResponseTypes } from \"models/IApiResponse\";\r\nimport { constants } from \"../constants\";\r\nimport { sendTrack } from \"./trackingService\";\r\nimport { findPossibleWord } from \"./util\";\r\n\r\nexport async function fetchWord(word: string, source: string): Promise<IApiResponse<any>> {\r\n  source = source || \"html\";\r\n  let result: IApiResponse<any> = {\r\n    resultType: ApiResponseTypes.Success\r\n  }\r\n  try {\r\n    word = word.toLocaleLowerCase().trim();\r\n    const response = await fetch(`${constants.RESOURCE_URL}/${source}/${word}.json`);\r\n    let text = await response.text();\r\n    text = text.replace(\r\n      /find\\?type=(\\d+)&amp;query=([^\"]*)/ig,\r\n      \"$2\"\r\n    );\r\n    result.data = JSON.parse(text);\r\n    if(Object.keys(result.data).length === 0) {\r\n      \r\n      throw new Error(\"Word data is empty\")\r\n    }\r\n    sendTrack(word);\r\n  }\r\n  catch (err) {\r\n    console.log(err);\r\n    const similars = findPossibleWord(word);\r\n      if(similars.length >0) {\r\n        result.suggestions = similars;\r\n    }\r\n    result.resultType = ApiResponseTypes.Error;\r\n    result.errorMessage = \"failed to fetch word\";\r\n  }\r\n  return result;\r\n}","import React from \"react\";\r\nimport { useTracking } from \"hooks/useTracking\";\r\nimport {\r\n  Chip,\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n  Grid,\r\n  Typography,\r\n  Zoom,\r\n  CircularProgress\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    liveSearchWord: {\r\n      margin: theme.spacing(1)\r\n    },\r\n    liveSearchContainer: {\r\n      marginTop: theme.spacing(2)\r\n    }\r\n  })\r\n);\r\n\r\nexport interface ILiveSearchProps {\r\n  onWordClick: (word: string) => void;\r\n}\r\nconst LiveSearch: React.FC<ILiveSearchProps> = ({ onWordClick }) => {\r\n  const { trackData, error, loading } = useTracking();\r\n  const classes = useStyles({});\r\n  return (\r\n    <Grid className={classes.liveSearchContainer}>\r\n      <Typography variant=\"h5\" color=\"primary\">Tìm kiếm gần nhất ....</Typography>\r\n      {Object.keys(trackData).map(key => {\r\n        return (\r\n          <Zoom in={true} key={key}>\r\n            <Chip\r\n              label={key}\r\n              className={classes.liveSearchWord}\r\n              clickable\r\n              onClick={() => onWordClick(key)}\r\n              size=\"small\"\r\n              color=\"primary\"\r\n            />\r\n          </Zoom>\r\n        );\r\n      })}\r\n      {loading && <CircularProgress color=\"secondary\" />}\r\n      {error && <span>Xin lỗi, đã xãy ra lỗi kết nối với máy chủ, vui lòng thử lại sau.</span>}\r\n    </Grid>\r\n  );\r\n};\r\nexport default LiveSearch;\r\n","import React, { useEffect } from \"react\";\r\nimport * as firebase from \"firebase\";\r\nimport moment from \"moment\";\r\n\r\nexport interface ITracking{\r\n  [key : string]: string;\r\n}\r\nexport function useTracking() {\r\n    // initialize our default state\r\n    const defaultList: ITracking = {};\r\n    const [error, setError] = React.useState(false);\r\n    const [loading, setLoading] = React.useState(true) \r\n    const [trackData, setTrackData] = React.useState(defaultList)\r\n    useEffect(\r\n      () => {\r\n        try{\r\n        const now = moment().utc().startOf(\"day\").format(\"YYYYMMDD\")\r\n        const ref = firebase.database().ref('/'+now);\r\n        console.log(\"ref\");\r\n        ref.on(\"value\", (snapshot) => { \r\n            setLoading(false);\r\n            setTrackData(snapshot.val());\r\n            console.log(snapshot.val())\r\n        });\r\n        return () => {\r\n          ref.off(\"value\")\r\n        }\r\n      }\r\n      catch(err) {\r\n        setError(true);\r\n      }\r\n        \r\n      }, []\r\n    )\r\n  \r\n    return {\r\n      error,\r\n      loading,\r\n      trackData,\r\n    }\r\n  }","import { useState, useEffect, useCallback } from \"react\";\r\n// TODO move this to inside hook???\r\nconst w = window as any;\r\nconst SpeechRecognition = w.webkitSpeechRecognition ||\r\n  w.mozSpeechRecognition ||\r\n  w.msSpeechRecognition ||\r\n  w.oSpeechRecognition ||\r\n  w.SpeechRecognition;\r\n\r\nconst recognition = SpeechRecognition && new SpeechRecognition();\r\n\r\nconst useSpeechInput = (onVoiceInput: (w: string) => void, onVoiceStarted?: () => void) => {\r\n  const isBrowserSupportSpeech = SpeechRecognition !== null && SpeechRecognition !== undefined;\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [started, setStarted] = useState(false);\r\n\r\n  const startVoiceInput = () => {\r\n    if (!recognition) return;\r\n    recognition.start();\r\n\r\n  }\r\n  const voiceCallback = useCallback(() => {\r\n    if (!recognition) {\r\n      return;\r\n    }\r\n    recognition.continuous = false;\r\n    recognition.interimResults = false;\r\n    recognition.lang = \"en-US\";\r\n\r\n    recognition.onresult = (e: any) => {\r\n      setInputValue(e.results[0][0].transcript);\r\n      onVoiceInput(e.results[0][0].transcript)\r\n      recognition.stop();\r\n    };\r\n\r\n    recognition.onaudiostart = () => {\r\n      if (onVoiceStarted) onVoiceStarted();\r\n      setStarted(true);\r\n    }\r\n    recognition.onend = () => {\r\n      setStarted(false);\r\n    }\r\n\r\n    recognition.onerror = (e: any) => {\r\n      recognition.stop();\r\n    }\r\n\r\n  }, [onVoiceInput, onVoiceStarted])\r\n  useEffect(() => {\r\n    voiceCallback()\r\n    return () => {\r\n      if (recognition && started)\r\n        recognition.stop()\r\n    }\r\n\r\n  }, [voiceCallback, started])\r\n\r\n  return {\r\n    started,\r\n    inputValue,\r\n    startVoiceInput,\r\n    isBrowserSupportSpeech\r\n  }\r\n}\r\n\r\nexport default useSpeechInput;","import Fuse from \"fuse.js\";\r\nimport constants from \"../constants\";\r\n\r\ntype EnglishWordFuse = {\r\n    title: string;\r\n}\r\nclass AutoCompleteService {\r\n    private fuse: Fuse<EnglishWordFuse, Fuse.FuseOptions<EnglishWordFuse>>;\r\n    private isReady:boolean = false;\r\n    private options: Fuse.FuseOptions<EnglishWordFuse>;\r\n    constructor() {\r\n        this.options = {\r\n            shouldSort: true,\r\n            threshold: 0.05,\r\n            location: 0,\r\n            distance: 100,\r\n            maxPatternLength: 32,\r\n            minMatchCharLength: 3,\r\n            keys: [\r\n              \"title\",\r\n            ]\r\n          };\r\n    }\r\n    public async initialize() {\r\n        const res = await fetch(constants.WORD_LIST_URL, {mode: \"no-cors\"});\r\n        const json = await res.json();\r\n        const data : EnglishWordFuse[] = Object.keys(json).map(key => {return {title: key}});\r\n\r\n        this.fuse = new Fuse(data, this.options); // \"list\" is the item array\r\n        console.log(\"auto complete service initialized\");\r\n        this.isReady = true;\r\n    }\r\n    public getAutocomplete(word:string) {\r\n        if(!word || !this.isReady || word.length <3) return [];\r\n        const results : any[]=  this.fuse.search(word);\r\n        const arr =  results.map(x =>x.title);\r\n        // console.log(arr)\r\n        // if(arr && arr.length >0 && arr[0] === word) return []\r\n        return arr.slice(0,10);\r\n    }\r\n}\r\n//this is singleton\r\nexport default new AutoCompleteService() ;\r\n","import React, { useState, FormEvent, useEffect, useCallback } from \"react\";\r\n\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\"\r\n\r\nimport SuggestionList from 'components/SuggestionList'\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport Box from \"@material-ui/core/Box\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport InputBase from \"@material-ui/core/InputBase\"\r\nimport Divider from \"@material-ui/core/Divider\"\r\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\"\r\n\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport TranslateIcon from \"@material-ui/icons/Translate\";\r\nimport SwapHorizIcon from \"@material-ui/icons/SwapHoriz\";\r\nimport AccountTreeIcon from \"@material-ui/icons/AccountTree\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\r\nimport { LinkInterceptor } from \"components/LinkInterceptor\";\r\nimport { useParams, useHistory } from \"react-router\";\r\nimport { WordPopup } from \"components/WordPopup/WordPopup\";\r\nimport { fetchWord } from \"services/api\";\r\nimport { toProperCase } from \"services/util\";\r\nimport constants from \"../constants\";\r\nimport { Menu, MenuItem, Link } from \"@material-ui/core\";\r\nimport { WordSpeaker } from \"common/WordSpeaker/WordSpeaker\";\r\nimport LiveSearch from \"components/LiveSearch/LiveSearch\";\r\nimport useSpeechInput from \"hooks/useSpeechInput\";\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport { useAutocomplete } from \"hooks/useAutoComplete\";\r\nimport { useDebounce } from \"hooks/useDebounce\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      padding: \"2px 4px\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      width: \"100%\"\r\n    },\r\n    input: {\r\n      marginLeft: theme.spacing(1),\r\n      flex: 1\r\n    },\r\n    iconButton: {\r\n      padding: 10\r\n    },\r\n    divider: {\r\n      height: 1,\r\n      marginTop: theme.spacing(1)\r\n    },\r\n    container: {\r\n      margin: theme.spacing(1, 0),\r\n      paddingTop: theme.spacing(2)\r\n    },\r\n    speakButton: {\r\n      marginLeft: theme.spacing(3)\r\n    },\r\n    snackbar: {\r\n      backgroundColor: theme.palette.error.dark,\r\n    },\r\n    autoComplete: {\r\n      margin: theme.spacing(1)\r\n    }\r\n  })\r\n);\r\n\r\nconst Home: React.FC = () => {\r\n  const source = localStorage.getItem(\"SOURCE_ID\") || \"html\";\r\n  const speakAccents = [\"uk\", \"us\"];\r\n  let history = useHistory();\r\n  const classes = useStyles({});\r\n  const [sourceId, setSourceId] = useState(source);\r\n  const [data, setData] = useState();\r\n  const [popupWord, setPopupWord] = useState(null);\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  const [suggestionList, setSuggestionList] = useState([]);\r\n  const [type, setType] = useState(\"en_vn\");\r\n  const [message, setMessage] = useState(null);\r\n  const { word } = useParams();\r\n  const [liveSearch, setLiveSearch] = useState(true);\r\n  const autocomplete = useDebounce(keyword, 500);\r\n  const { autoCompleteItems, autoCompleteLoading, setAutoCompleteItems } = useAutocomplete(autocomplete);\r\n\r\n\r\n  const search = useCallback(async (inputKeyword: string) => {\r\n    if (!inputKeyword) return;\r\n    const { data, suggestions } = await fetchWord(inputKeyword, sourceId);\r\n\r\n    if (data) {\r\n      setLiveSearch(false);\r\n      setType(\"en_vn\");\r\n      setData(data);\r\n      setMessage(null);\r\n      history.push(inputKeyword);\r\n      window.scrollTo({ top: 0 })\r\n    }\r\n    else {\r\n      setLiveSearch(true);\r\n      setData({});\r\n      setSuggestionList(suggestions);\r\n      setMessage(\"Xin lỗi, từ bạn tìm kiếm không tồn tại hoặc chưa được cập nhật\")\r\n    }\r\n    setAutoCompleteItems([])\r\n\r\n  }, [history, sourceId, setAutoCompleteItems]);\r\n  const onVoiceResultCb = useCallback((input) => {\r\n    setKeyword(input);\r\n    search(input);\r\n  }, [search])\r\n  const voiceStartedCB = useCallback(() => { setKeyword(\"\") }, []);\r\n\r\n  const { isBrowserSupportSpeech, startVoiceInput, started } = useSpeechInput(onVoiceResultCb, voiceStartedCB);\r\n  const onWordClick = async (clickedWord: string) => {\r\n    const response = await fetchWord(clickedWord, sourceId);\r\n    if (response.data && response.data.en_vn && response.data.en_vn.data) {\r\n      setPopupWord(response.data.en_vn.data)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    setKeyword(word);\r\n    search(word);\r\n  }, [word, search])\r\n\r\n  const dict = data && (data as any)[type];\r\n  const handleTypeChange = (\r\n    event: React.MouseEvent<HTMLElement>,\r\n    dictType: string\r\n  ) => {\r\n    setType(dictType);\r\n  };\r\n  const handleSubmit = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    search(keyword);\r\n    return false;\r\n  };\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n  const handleSourceMenuClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = (value?: string) => {\r\n    if (constants.DATA_SOURCE_ID.some(x => x === value)) {\r\n      localStorage.setItem(\"SOURCE_ID\", value);\r\n      setSourceId(value)\r\n    }\r\n    setAnchorEl(null);\r\n  };\r\n  const reset = () => {\r\n    setLiveSearch(true);\r\n    setKeyword(\"\");\r\n    setData(null);\r\n    history.push(\"/\");\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container className={classes.container}>\r\n        <Grid item sm={6} xs={12}>\r\n          <form onSubmit={handleSubmit}>\r\n            <Paper className={classes.root}>\r\n              <IconButton className={classes.iconButton} aria-label=\"menu\" onClick={handleSourceMenuClick} >\r\n                <MenuIcon />\r\n              </IconButton>\r\n              <Menu\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n              >\r\n                <MenuItem disabled={sourceId === \"html\"} onClick={() => handleClose(\"html\")}>Từ điển 1</MenuItem>\r\n                <MenuItem disabled={sourceId === \"data\"} onClick={() => handleClose(\"data\")}>Từ điển 2</MenuItem>\r\n              </Menu>\r\n              <InputBase\r\n                value={keyword}\r\n                onChange={e => setKeyword(e.target.value)}\r\n                className={classes.input}\r\n                placeholder={started ? \"Nói từ muốn tìm kiếm\" : \"Nhập từ muốn tìm\"}\r\n                inputProps={{ \"aria-label\": \"English -> Vietnamese\" }}\r\n              />\r\n              {isBrowserSupportSpeech && <IconButton\r\n                disabled={started}\r\n                onClick={() => startVoiceInput()}\r\n                className={classes.iconButton}\r\n                aria-label=\"voice input\"\r\n              >\r\n                <MicIcon color={started ? \"secondary\" : \"inherit\"} />\r\n              </IconButton>}\r\n\r\n\r\n              <IconButton\r\n                type=\"submit\"\r\n                className={classes.iconButton}\r\n                aria-label=\"search\"\r\n              >\r\n                <SearchIcon />\r\n              </IconButton>\r\n              <Divider className={classes.divider} orientation=\"vertical\" />\r\n              <IconButton\r\n                color=\"primary\"\r\n                className={classes.iconButton}\r\n                aria-label=\"directions\"\r\n                onClick={reset}\r\n              >\r\n                <AutorenewIcon />\r\n              </IconButton>\r\n            </Paper>\r\n          </form>\r\n        </Grid>\r\n\r\n        {dict &&\r\n          <Grid item sm={6} xs={12} >\r\n            <ToggleButtonGroup\r\n              value={type}\r\n              exclusive\r\n              onChange={handleTypeChange}\r\n              style={{ float: \"right\" }}\r\n              aria-label=\"select dictionary options\"\r\n            >\r\n              <ToggleButton value=\"en_vn\" aria-label=\"left aligned\">\r\n                <TranslateIcon></TranslateIcon> Eng -> Vi &nbsp;\r\n              </ToggleButton>\r\n              <ToggleButton value=\"en_en\" aria-label=\"centered\">\r\n                <SwapHorizIcon /> Eng -> Eng &nbsp;\r\n              </ToggleButton>\r\n              <ToggleButton value=\"synonyms\" aria-label=\"right aligned\">\r\n                <AccountTreeIcon /> Đồng Nghĩa\r\n              </ToggleButton>\r\n            </ToggleButtonGroup>\r\n          </Grid>\r\n        }\r\n        <Grid xs={12} item container>\r\n          {autoCompleteLoading && <span>Loading....</span>}\r\n          {autoCompleteItems.length > 0 && autoCompleteItems.map(x => <Link key={x} color=\"primary\" href={x} className={classes.autoComplete} onClick={\r\n            (e: React.MouseEvent<HTMLAnchorElement>) => { e.preventDefault(); search(x) }}>{x}</Link>)\r\n          }\r\n        </Grid>\r\n      </Grid>\r\n      {dict && (\r\n        <Grid>\r\n          <Grid xs={12} item>\r\n            <Typography variant=\"h3\" component=\"span\">\r\n              {dict.data ? toProperCase(dict.data.word) : \"\"}\r\n            </Typography>\r\n            <Typography variant=\"h4\" component=\"span\">\r\n              <Box color=\"text.secondary\" component=\"span\">\r\n                {dict.data && dict.data.pronounce ? `  (${dict.data.pronounce})` : \"\"}\r\n              </Box>\r\n            </Typography>\r\n            <WordSpeaker word={dict.data.word} accents={speakAccents} noStyle={false}></WordSpeaker>\r\n            <Divider className={classes.divider} />\r\n            <LinkInterceptor\r\n              html={dict.data && dict.data.content}\r\n              onWordClick={onWordClick}\r\n              onLinkClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\r\n                e.preventDefault();\r\n                const arr = e.currentTarget.href.split(\"/\");\r\n                const word = arr[arr.length - 1];\r\n                setKeyword(word);\r\n                search(word);\r\n              }}\r\n            />\r\n            {popupWord && <WordPopup word={popupWord} onClose={() => setPopupWord(null)}></WordPopup>}\r\n            {dict.suggests && (\r\n              <Grid>\r\n                <SuggestionList\r\n                  suggests={dict.suggests}\r\n                  setKeyword={setKeyword}\r\n                  search={search}\r\n                />\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n\r\n      {message && (\r\n        <SnackbarContent className={classes.snackbar}\r\n          message={\r\n            <React.Fragment>\r\n              <Typography variant=\"subtitle2\">{message}</Typography>\r\n\r\n              {(suggestionList && suggestionList.length > 0) && <React.Fragment>\r\n                <span>Có thể bạn quan tâm :</span>\r\n                {suggestionList.map(x => <Link key={x} style={{ color: \"#fff\", cursor: \"pointer\" }} onClick={() => search(x)}>{x}</Link>)} </React.Fragment>}\r\n            </React.Fragment>}\r\n\r\n          action={<IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={() => setMessage(null)}>\r\n            <CloseIcon />\r\n          </IconButton>}>\r\n\r\n        </SnackbarContent>\r\n      )}\r\n      {liveSearch && <LiveSearch onWordClick={(liveSearchWord) => search(liveSearchWord)}></LiveSearch>}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import autoCompleteService from \"services/autoCompleteService\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport function useAutocomplete(word: string) {\r\n    const [autoCompleteItems, setAutoCompleteItems] = useState([])\r\n    const [autoCompleteLoading, setAutoCompleteLoading] = useState(false);\r\n    useEffect(() => {\r\n        setAutoCompleteLoading(true);\r\n        const start = (new Date()).getTime();\r\n        const results = autoCompleteService.getAutocomplete(word);\r\n        setAutoCompleteItems(results);\r\n        console.log(\"auto complete search time(ms)\", (new Date()).getTime() - start)\r\n        setAutoCompleteLoading(false);\r\n        return () => {\r\n\r\n        }\r\n    }, [word]);\r\n\r\n    return {\r\n        autoCompleteItems,\r\n        autoCompleteLoading,setAutoCompleteItems\r\n    }\r\n}","import { useState, useEffect } from \"react\";\r\n\r\nexport function useDebounce(value: string, delay: number) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(\r\n    () => {\r\n      const handler = setTimeout(() => {\r\n        setDebouncedValue(value);\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearTimeout(handler);\r\n      };\r\n    },\r\n    [value, delay] \r\n  );\r\n\r\n  return debouncedValue;\r\n}","import React from \"react\";\r\nimport ThemeProvider from './ThemeProvider'\r\nimport AppBar from 'components/AppBar'\r\nimport Home from \"containers/Home\"\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <ThemeProvider>\r\n        <Container fixed  className=\"container-wrapper\">\r\n          <AppBar />\r\n          <Container>\r\n          <Switch>\r\n            <Route path=\"/:word\">\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"\">\r\n              <Home />\r\n            </Route>\r\n            </Switch>\r\n            </Container>\r\n        </Container>\r\n      </ThemeProvider>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {mode: \"no-cors\"})\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as firebase from \"firebase\";\r\nimport App from 'common/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css'\r\nimport autoCompleteService from 'services/autoCompleteService';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyC0Afu4UrdUxEXpZSNtTX5dqB7Kiz9h-58\",\r\n    authDomain: \"vndict-http.firebaseapp.com\",\r\n    databaseURL: \"https://vndict-http.firebaseio.com\",\r\n    projectId: \"vndict-http\",\r\n    storageBucket: \"vndict-http.appspot.com\",\r\n    messagingSenderId: \"395495785689\",\r\n    appId: \"1:395495785689:web:becd3318f899758373aac8\",\r\n    measurementId: \"G-27K3H2BHSN\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  firebase.analytics();\r\n\r\n  autoCompleteService.initialize();\r\n\r\n  \r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}