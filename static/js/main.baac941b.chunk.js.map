{"version":3,"sources":["common/ThemeProvider/index.tsx","components/AppBar/index.tsx","components/SuggestionList/index.tsx","components/LinkInterceptor.tsx","hooks/useLongPress.ts","services/util.ts","models/IApiResponse.ts","constants.ts","common/WordSpeaker/WordSpeaker.tsx","components/WordPopup/WordPopup.tsx","services/trackingService.ts","services/api.ts","components/LiveSearch/LiveSearch.tsx","hooks/useTracking.ts","hooks/useSpeechInput.ts","services/autoCompleteService.ts","containers/Home.tsx","hooks/useAutoComplete.ts","hooks/useDebounce.ts","common/App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","Theme","children","CssBaseline","ThemeProvider","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","SuggestionList","suggests","setKeyword","search","classes","useStyles","successtionBox","paddingTop","length","Box","className","suggestList","Divider","component","style","marginTop","List","map","item","ListItem","key","word","button","onClick","ListItemIcon","ListItemText","primary","makeStyles","backgroundColor","palette","background","paper","spacing","LinkInterceptor","html","onLinkClick","onWordClick","ref","useRef","listeners","wordDdCLickHandle","useCallback","text","doc","document","window","getSelection","toString","selection","type","createRange","longPressHandler","callback","ms","useState","startLongPress","setStartLongPress","useEffect","timerId","setTimeout","clearTimeout","start","stop","onMouseDown","onMouseUp","onMouseLeave","onTouchStart","onTouchEnd","useLongPress","current","push","addEventListener","Array","from","querySelectorAll","forEach","node","removeEventListener","dangerouslySetInnerHTML","__html","toProperCase","input","toUpperCase","substr","isUrlExist","url","a","fetch","method","res","ok","console","log","findPossibleWord","similars","ApiResponseTypes","constants","RESOURCE_URL","process","REACT_APP_RESOURCE_URL","DATA_SOURCE_ID","TRACKING_SERVICE_URL","WORD_LIST_URL","createStyles","speakButton","marginLeft","WordSpeaker","noStyle","accents","sounds","setSounds","verifyExistingResource","items","toLocaleLowerCase","Chip","clickable","disabled","accent","Audio","play","playSound","icon","label","appBar","title","flex","innerBox","padding","WordPopup","onClose","Transition","React","forwardRef","props","Slide","direction","Dialog","fullScreen","innerWidth","open","TransitionComponent","pronounce","content","e","preventDefault","sendTrack","mean","mode","body","JSON","stringify","fetchWord","source","result","resultType","Success","trim","response","replace","data","parse","Object","keys","Error","suggestions","errorMessage","liveSearchWord","margin","liveSearchContainer","LiveSearch","error","setError","loading","setLoading","trackData","setTrackData","firebase","on","snapshot","val","off","err","useTracking","Grid","Zoom","in","size","CircularProgress","w","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","recognition","useSpeechInput","onVoiceInput","onVoiceStarted","isBrowserSupportSpeech","undefined","inputValue","setInputValue","started","setStarted","voiceCallback","continuous","interimResults","lang","onresult","results","transcript","onaudiostart","onend","onerror","startVoiceInput","fuse","isReady","options","this","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","json","Fuse","x","slice","root","display","alignItems","width","iconButton","divider","height","container","snackbar","dark","autoComplete","Home","localStorage","getItem","history","useHistory","sourceId","setSourceId","setData","popupWord","setPopupWord","keyword","suggestionList","setSuggestionList","setType","message","setMessage","useParams","liveSearch","setLiveSearch","autoCompleteItems","setAutoCompleteItems","autoCompleteLoading","setAutoCompleteLoading","Date","getTime","autoCompleteService","getAutocomplete","useAutocomplete","value","delay","debouncedValue","setDebouncedValue","handler","useDebounce","inputKeyword","scrollTo","top","onVoiceResultCb","voiceStartedCB","clickedWord","en_vn","dict","anchorEl","setAnchorEl","handleClose","some","setItem","Fragment","sm","xs","onSubmit","Paper","event","currentTarget","keepMounted","Boolean","MenuItem","InputBase","onChange","target","placeholder","inputProps","orientation","ToggleButtonGroup","exclusive","dictType","float","ToggleButton","Link","href","arr","split","SnackbarContent","cursor","action","App","basename","Container","fixed","path","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initialize","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.baac941b.chunk.js","sourcesContent":["import React from \"react\"\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\n\nconst theme = createMuiTheme()\n\nconst Theme: React.FC = ({ children }) => {\n  return (\n    <>\n      <CssBaseline />\n      <ThemeProvider theme={theme}>\n        {children}\n      </ThemeProvider>\n    </>\n  )\n}\n\nexport default Theme\n\n\n\n","import React from \"react\"\n\nimport MuiAppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\n\nimport MenuBookIcon from '@material-ui/icons/MenuBook'\n\nconst AppBar: React.FC = () => {\n  return (\n    <MuiAppBar position=\"static\">\n      <Toolbar>\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n          <MenuBookIcon />\n        </IconButton>\n        <Typography variant=\"h6\">Vietnamese - English open dictionary</Typography>\n      </Toolbar>\n    </MuiAppBar>\n  )\n}\n\nexport default AppBar","import React from 'react'\n\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\n\nimport Typography from \"@material-ui/core/Typography\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport LabelImportantIcon from \"@material-ui/icons/LabelImportant\"\nimport { Box, Divider } from '@material-ui/core'\n\ninterface SuggestionListProps {\n  suggests: any[],\n  setKeyword?: any\n  search?: any\n}\n\nconst SuggestionList: React.FC<SuggestionListProps> = ({ suggests, setKeyword, search }) => {\n  const classes = useStyles({ successtionBox: {paddingTop: \"25px\"}})\n \n  return suggests && suggests.length >0 && (\n    <Box className= {classes.suggestList}>\n      <Divider/>\n      <Typography variant=\"h3\" component=\"h5\" style={{marginTop:\"25px\"}}>\n        Từ liên quan:\n      </Typography>\n      <List\n        component=\"nav\"\n        aria-label=\"contacts\"\n      >\n        {suggests.map((item: any) => (\n          <ListItem\n            key={item.word}\n            button\n            onClick={() => {\n              setKeyword(item.word)\n              search(item.word)\n            }}\n          >\n            <ListItemIcon>\n              <LabelImportantIcon />\n            </ListItemIcon>\n            <ListItemText primary={item.word} color=\"primary\" />\n          </ListItem>\n        ))}\n      </List>\n    </Box>\n  )\n}\n\nexport default SuggestionList\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  suggestList: {\n    backgroundColor: theme.palette.background.paper,\n    marginTop: theme.spacing(5)\n  }\n}))","import React, { useEffect, useRef, useCallback } from 'react'\nimport { Typography } from '@material-ui/core'\nimport useLongPress from \"hooks/useLongPress\";\nexport interface IInterceptionProps {\n  html: string;\n  onLinkClick: (e: any) => any;\n  onWordClick?: (e: string) => void;\n}\nexport function LinkInterceptor({ html, onLinkClick, onWordClick }: IInterceptionProps) {\n  const ref = useRef(null)\n  const listeners = useRef([])\n  const wordDdCLickHandle = useCallback(() => {\n    let text = \"\";\n    const doc = document as any;\n\n    if (window.getSelection) {\n      text = window.getSelection().toString();\n    } else if (doc.selection && doc.selection.type !== \"Control\") {\n      text = doc.selection.createRange().text;\n    }\n    if (text && onWordClick) {\n      onWordClick(text);\n    }\n  }, [onWordClick]);\n  const longPressHandler = useLongPress(() => {\n    wordDdCLickHandle();\n  }, 1000)\n\n  useEffect(\n    () => {\n      listeners.current.push(ref.current);\n      ref.current.addEventListener(\"dblclick\", wordDdCLickHandle)\n      const links: HTMLElement[] = Array.from(ref.current.querySelectorAll('a'))\n      links.forEach(node => {\n        node.addEventListener('click', onLinkClick)\n        listeners.current.push(node)\n      })\n\n      return () => {\n        listeners.current.forEach(node => {\n          node.removeEventListener('click', onLinkClick);\n          node.removeEventListener('dblclick', wordDdCLickHandle);\n        });\n        listeners.current = []\n      }\n    },\n    [html, onLinkClick, onWordClick, wordDdCLickHandle]\n  )\n\n  return <Typography {...longPressHandler} ref={ref} variant=\"body1\" component=\"article\" dangerouslySetInnerHTML={{ __html: html }}></Typography>\n}","import { useState, useEffect, useCallback } from 'react';\n\nexport default function useLongPress(callback = () => { }, ms = 300) {\n  const [startLongPress, setStartLongPress] = useState(false);\n\n  useEffect(() => {\n    let timerId: any;\n    if (startLongPress) {\n      timerId = setTimeout(callback, ms);\n    } else {\n      clearTimeout(timerId);\n    }\n\n    return () => {\n      clearTimeout(timerId);\n    };\n    // eslint-disable-next-line\n  }, [startLongPress]);\n\n  const start = useCallback(() => {\n    setStartLongPress(true);\n  }, []);\n  const stop = useCallback(() => {\n    setStartLongPress(false);\n  }, []);\n\n  return {\n\n    onMouseDown: start,\n    onMouseUp: stop,\n    onMouseLeave: stop,\n    onTouchStart: start,\n    onTouchEnd: stop,\n  };\n}","\nexport function toProperCase(input: string) {\n  if (!input) return null;\n  input = input[0].toUpperCase() + input.substr(1);\n  return input;\n}\n\nexport async function isUrlExist(url: string) {\n  try {\n    const res = await fetch(url, { method: 'HEAD' });\n    if (res && res.ok) {\n      return true;\n    }\n  }\n  catch (err) {\n    console.log(err);\n  };\n  return false;\n}\nexport function findPossibleWord(word: string){\n  const similars = [];\n  // remove s at the end\n  if(word[word.length-1] === 's') {\n    similars.push(word.substr(0,word.length -1))\n  }\n  return similars;\n}","export enum ApiResponseTypes {\n  Success = \"success\",\n  Error = \"error\"\n}\nexport interface IApiResponse<T> {\n  data?: T\n  resultType: ApiResponseTypes,\n  errorMessage?: string;\n  suggestions?: string[];\n}","export const constants = {\n  RESOURCE_URL: process.env.REACT_APP_RESOURCE_URL || \"https://data.en2vi.com/\",\n  DATA_SOURCE_ID: [\"data\", \"html\"],\n  TRACKING_SERVICE_URL: \"https://us-central1-vndict-http.cloudfunctions.net/track\",\n  WORD_LIST_URL: \"/words_dictionary.json\"\n}\nexport default constants;","import React, { useState, useEffect, useCallback } from \"react\";\nimport { Box, Chip, makeStyles, Theme, createStyles } from \"@material-ui/core\";\nimport VolumeDownIcon from \"@material-ui/icons/VolumeDown\";\n// import VolumeUpIcon from \"@material-ui/icons/VolumeUp\";\nimport { constants } from \"../../constants\";\nimport { isUrlExist } from \"services/util\";\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    speakButton: {\n      marginLeft: theme.spacing(3)\n    }\n  })\n);\nexport interface IWordSpeakerProps {\n  word: string;\n  accents?: string[];\n  noStyle?: boolean;\n}\nexport const WordSpeaker: React.FC<IWordSpeakerProps> = ({ noStyle, word, accents }) => {\n  const classes = useStyles({});\n  const initialSound: { [x: string]: string } = {}\n  const [sounds, setSounds] = useState(initialSound);\n  //TODO : Fix the react warning, somehow it complaint about accents\n  const verifyExistingResource = useCallback(async () => {\n    const items: { [x: string]: string } = {};\n    if (word) {\n      for (const item of accents) {\n        const url = `${constants.RESOURCE_URL}/voice/${word.toLocaleLowerCase()}_${item}.mp3`;\n        const existed = await isUrlExist(url);\n        if (existed) {\n          items[item] = url;\n        }\n      }\n    }\n    setSounds(items);\n    // eslint-disable-next-line\n  }, [word])\n  useEffect(() => {\n    verifyExistingResource();\n  }, [verifyExistingResource]);\n  const playSound = (accent?: \"us\" | \"uk\") => {\n    const url = `${constants.RESOURCE_URL}/voice/${word.toLocaleLowerCase()}_${accent}.mp3`;\n    const audio = new Audio(url);\n    audio.play();\n  };\n  return (\n    <Box className=\"float-right\">\n      {accents.map((a) =>\n        <Chip key={a}\n          className={classes.speakButton}\n          clickable={sounds[a] != null}\n          disabled={!sounds[a]}\n          color={(!noStyle && a === \"us\") ? \"secondary\" : \"primary\"}\n          onClick={() => playSound(a as \"uk\" | \"us\")}\n          icon={<VolumeDownIcon />}\n          label={a.toUpperCase()}\n        />\n      )}\n    </Box>\n  )\n}\n\nexport default WordSpeaker;","import {\n  Dialog, AppBar, Toolbar, IconButton, Typography,\n  makeStyles, Theme, createStyles, Slide, Box\n} from \"@material-ui/core\";\n\nimport React from \"react\";\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport { TransitionProps } from '@material-ui/core/transitions';\nimport { LinkInterceptor } from \"components/LinkInterceptor\";\nimport { toProperCase } from \"services/util\";\nimport WordSpeaker from \"common/WordSpeaker/WordSpeaker\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      position: 'relative',\n    },\n    title: {\n      marginLeft: theme.spacing(2),\n      flex: 1,\n    },\n    innerBox: {\n      padding: theme.spacing(2)\n    }\n  }),\n);\n\nexport const WordPopup: React.FC<{ word: any, onClose: () => void }> = ({ word, onClose }) => {\n  const classes = useStyles({});\n  const Transition = React.forwardRef<unknown, TransitionProps>(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n  const handleClose = () => onClose();\n  if (!word) return null;\n\n  return (\n    <Dialog fullScreen={window.innerWidth < 667} open={word != null} onClose={() => { }} TransitionComponent={Transition}>\n      <AppBar className={classes.appBar}>\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n            <CloseIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            {toProperCase(word.word)} {word.pronounce && <span> - {word.pronounce}</span>}\n          </Typography>\n          <WordSpeaker word={word.word} accents={[\"us\", \"uk\"]} noStyle={true}></WordSpeaker>\n        </Toolbar>\n      </AppBar>\n        <Box className={classes.innerBox}>\n          <LinkInterceptor\n            html={word.content}\n            onLinkClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\n              e.preventDefault();\n            }}></LinkInterceptor>\n        </Box>\n    </Dialog>\n      )\n}","import constants from \"../constants\";\n\nexport async function sendTrack(word: string, mean?: string) {\n    mean = mean|| word;\n    try{\n    await fetch(constants.TRACKING_SERVICE_URL, {method: \"POST\", mode:\"no-cors\", body: JSON.stringify({word, mean})});\n    }catch(err) {\n        console.log(err)\n    }\n}","import { IApiResponse, ApiResponseTypes } from \"models/IApiResponse\";\nimport { constants } from \"../constants\";\nimport { sendTrack } from \"./trackingService\";\nimport { findPossibleWord } from \"./util\";\n\nexport async function fetchWord(word: string, source: string): Promise<IApiResponse<any>> {\n  source = source || \"html\";\n  let result: IApiResponse<any> = {\n    resultType: ApiResponseTypes.Success\n  }\n  try {\n    word = word.toLocaleLowerCase().trim();\n    const response = await fetch(`${constants.RESOURCE_URL}/${source}/${word}.json`);\n    let text = await response.text();\n    text = text.replace(\n      /find\\?type=(\\d+)&amp;query=([^\"]*)/ig,\n      \"$2\"\n    );\n    result.data = JSON.parse(text);\n    if(Object.keys(result.data).length === 0) {\n      \n      throw new Error(\"Word data is empty\")\n    }\n    sendTrack(word);\n  }\n  catch (err) {\n    console.log(err);\n    const similars = findPossibleWord(word);\n      if(similars.length >0) {\n        result.suggestions = similars;\n    }\n    result.resultType = ApiResponseTypes.Error;\n    result.errorMessage = \"failed to fetch word\";\n  }\n  return result;\n}","import React from \"react\";\nimport { useTracking } from \"hooks/useTracking\";\nimport {\n  Chip,\n  makeStyles,\n  Theme,\n  createStyles,\n  Grid,\n  Typography,\n  Zoom,\n  CircularProgress\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    liveSearchWord: {\n      margin: theme.spacing(1)\n    },\n    liveSearchContainer: {\n      marginTop: theme.spacing(2)\n    }\n  })\n);\n\nexport interface ILiveSearchProps {\n  onWordClick: (word: string) => void;\n}\nconst LiveSearch: React.FC<ILiveSearchProps> = ({ onWordClick }) => {\n  const { trackData, error, loading } = useTracking();\n  const classes = useStyles({});\n  return (\n    <Grid className={classes.liveSearchContainer}>\n      <Typography variant=\"h5\" color=\"primary\">Tìm kiếm gần nhất ....</Typography>\n      {Object.keys(trackData).map(key => {\n        return (\n          <Zoom in={true} key={key}>\n            <Chip\n              label={key}\n              className={classes.liveSearchWord}\n              clickable\n              onClick={() => onWordClick(key)}\n              size=\"small\"\n              color=\"primary\"\n            />\n          </Zoom>\n        );\n      })}\n      {loading && <CircularProgress color=\"secondary\" />}\n      {error && <span>Xin lỗi, đã xãy ra lỗi kết nối với máy chủ, vui lòng thử lại sau.</span>}\n    </Grid>\n  );\n};\nexport default LiveSearch;\n","import React, { useEffect } from \"react\";\nimport * as firebase from \"firebase\";\nexport interface ITracking{\n  [key : string]: string;\n}\nexport function useTracking() {\n    // initialize our default state\n    const defaultList: ITracking = {};\n    const [error, setError] = React.useState(false);\n    const [loading, setLoading] = React.useState(true) \n    const [trackData, setTrackData] = React.useState(defaultList)\n    useEffect(\n      () => {\n        try{\n        const ref = firebase.database().ref('/');\n        console.log(\"ref\");\n        ref.on(\"value\", (snapshot) => { \n            setLoading(false);\n            setTrackData(snapshot.val());\n            console.log(snapshot.val())\n        });\n        return () => {\n          ref.off(\"value\")\n        }\n      }\n      catch(err) {\n        setError(true);\n      }\n        \n      }, []\n    )\n  \n    return {\n      error,\n      loading,\n      trackData,\n    }\n  }","import { useState, useEffect, useCallback } from \"react\";\n// TODO move this to inside hook???\nconst w = window as any;\nconst SpeechRecognition = w.webkitSpeechRecognition ||\n  w.mozSpeechRecognition ||\n  w.msSpeechRecognition ||\n  w.oSpeechRecognition ||\n  w.SpeechRecognition;\n\nconst recognition = SpeechRecognition && new SpeechRecognition();\n\nconst useSpeechInput = (onVoiceInput: (w: string) => void, onVoiceStarted?: () => void) => {\n  const isBrowserSupportSpeech = SpeechRecognition !== null && SpeechRecognition !== undefined;\n  const [inputValue, setInputValue] = useState(\"\");\n  const [started, setStarted] = useState(false);\n\n  const startVoiceInput = () => {\n    if (!recognition) return;\n    recognition.start();\n\n  }\n  const voiceCallback = useCallback(() => {\n    if (!recognition) {\n      return;\n    }\n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.lang = \"en-US\";\n\n    recognition.onresult = (e: any) => {\n      setInputValue(e.results[0][0].transcript);\n      onVoiceInput(e.results[0][0].transcript)\n      recognition.stop();\n    };\n\n    recognition.onaudiostart = () => {\n      if (onVoiceStarted) onVoiceStarted();\n      setStarted(true);\n    }\n    recognition.onend = () => {\n      setStarted(false);\n    }\n\n    recognition.onerror = (e: any) => {\n      recognition.stop();\n    }\n\n  }, [onVoiceInput, onVoiceStarted])\n  useEffect(() => {\n    voiceCallback()\n    return () => {\n      if (recognition && started)\n        recognition.stop()\n    }\n\n  }, [voiceCallback, started])\n\n  return {\n    started,\n    inputValue,\n    startVoiceInput,\n    isBrowserSupportSpeech\n  }\n}\n\nexport default useSpeechInput;","import Fuse from \"fuse.js\";\nimport constants from \"../constants\";\n\ntype EnglishWordFuse = {\n    title: string;\n}\nclass AutoCompleteService {\n    private fuse: Fuse<EnglishWordFuse, Fuse.FuseOptions<EnglishWordFuse>>;\n    private isReady:boolean = false;\n    private options: Fuse.FuseOptions<EnglishWordFuse>;\n    constructor() {\n        this.options = {\n            shouldSort: true,\n            threshold: 0.05,\n            location: 0,\n            distance: 100,\n            maxPatternLength: 32,\n            minMatchCharLength: 3,\n            keys: [\n              \"title\",\n            ]\n          };\n    }\n    public async initialize() {\n        const res = await fetch(constants.WORD_LIST_URL, {mode: \"no-cors\"});\n        const json = await res.json();\n        const data : EnglishWordFuse[] = Object.keys(json).map(key => {return {title: key}});\n\n        this.fuse = new Fuse(data, this.options); // \"list\" is the item array\n        console.log(\"auto complete service initialized\");\n        this.isReady = true;\n    }\n    public getAutocomplete(word:string) {\n        if(!word || !this.isReady || word.length <3) return [];\n        const results : any[]=  this.fuse.search(word);\n        const arr =  results.map(x =>x.title);\n        // console.log(arr)\n        // if(arr && arr.length >0 && arr[0] === word) return []\n        return arr.slice(0,10);\n    }\n}\n//this is singleton\nexport default new AutoCompleteService() ;\n","import React, { useState, FormEvent, useEffect, useCallback } from \"react\";\n\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\"\n\nimport SuggestionList from 'components/SuggestionList'\n\nimport Typography from \"@material-ui/core/Typography\";\n\nimport Box from \"@material-ui/core/Box\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Paper from \"@material-ui/core/Paper\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport InputBase from \"@material-ui/core/InputBase\"\nimport Divider from \"@material-ui/core/Divider\"\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\"\n\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport TranslateIcon from \"@material-ui/icons/Translate\";\nimport SwapHorizIcon from \"@material-ui/icons/SwapHoriz\";\nimport AccountTreeIcon from \"@material-ui/icons/AccountTree\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport { LinkInterceptor } from \"components/LinkInterceptor\";\nimport { useParams, useHistory } from \"react-router\";\nimport { WordPopup } from \"components/WordPopup/WordPopup\";\nimport { fetchWord } from \"services/api\";\nimport { toProperCase } from \"services/util\";\nimport constants from \"../constants\";\nimport { Menu, MenuItem, Link } from \"@material-ui/core\";\nimport { WordSpeaker } from \"common/WordSpeaker/WordSpeaker\";\nimport LiveSearch from \"components/LiveSearch/LiveSearch\";\nimport useSpeechInput from \"hooks/useSpeechInput\";\nimport MicIcon from '@material-ui/icons/Mic';\nimport { useAutocomplete } from \"hooks/useAutoComplete\";\nimport { useDebounce } from \"hooks/useDebounce\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: \"2px 4px\",\n      display: \"flex\",\n      alignItems: \"center\",\n      width: \"100%\"\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1\n    },\n    iconButton: {\n      padding: 10\n    },\n    divider: {\n      height: 1,\n      marginTop: theme.spacing(1)\n    },\n    container: {\n      margin: theme.spacing(1, 0),\n      paddingTop: theme.spacing(2)\n    },\n    speakButton: {\n      marginLeft: theme.spacing(3)\n    },\n    snackbar: {\n      backgroundColor: theme.palette.error.dark,\n    },\n    autoComplete: {\n      margin: theme.spacing(1)\n    }\n  })\n);\n\nconst Home: React.FC = () => {\n  const source = localStorage.getItem(\"SOURCE_ID\") || \"html\";\n  const speakAccents = [\"uk\", \"us\"];\n  let history = useHistory();\n  const classes = useStyles({});\n  const [sourceId, setSourceId] = useState(source);\n  const [data, setData] = useState();\n  const [popupWord, setPopupWord] = useState(null);\n  const [keyword, setKeyword] = useState(\"\");\n  const [suggestionList, setSuggestionList] = useState([]);\n  const [type, setType] = useState(\"en_vn\");\n  const [message, setMessage] = useState(null);\n  const { word } = useParams();\n  const [liveSearch, setLiveSearch] = useState(true);\n  const autocomplete = useDebounce(keyword, 500);\n  const { autoCompleteItems , autoCompleteLoading, setAutoCompleteItems} = useAutocomplete(autocomplete);\n\n\n  const search = useCallback(async (inputKeyword: string) => {\n    if (!inputKeyword) return;\n    const { data, suggestions } = await fetchWord(inputKeyword, sourceId);\n\n    if (data) {\n      setLiveSearch(false);\n      setType(\"en_vn\");\n      setData(data);\n      setMessage(null);\n      history.push(inputKeyword);\n      window.scrollTo({ top: 0 })\n    }\n    else {\n      setLiveSearch(true);\n      setData({});\n      setSuggestionList(suggestions);\n      setMessage(\"Xin lỗi, từ bạn tìm kiếm không tồn tại hoặc chưa được cập nhật\")\n    }\n    setAutoCompleteItems([])\n\n  }, [history, sourceId, setAutoCompleteItems]);\n  const onVoiceResultCb = useCallback((input) => {\n    setKeyword(input);\n    search(input);\n  }, [search])\n  const voiceStartedCB = useCallback(() => { setKeyword(\"\") }, []);\n\n  const { isBrowserSupportSpeech, startVoiceInput, started } = useSpeechInput(onVoiceResultCb, voiceStartedCB);\n  const onWordClick = async (clickedWord: string) => {\n    const response = await fetchWord(clickedWord, sourceId);\n    if (response.data && response.data.en_vn && response.data.en_vn.data) {\n      setPopupWord(response.data.en_vn.data)\n    }\n  }\n  useEffect(() => {\n    setKeyword(word);\n    search(word);\n  }, [word, search])\n\n  const dict = data && (data as any)[type];\n  const handleTypeChange = (\n    event: React.MouseEvent<HTMLElement>,\n    dictType: string\n  ) => {\n    setType(dictType);\n  };\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    search(keyword);\n    return false;\n  };\n\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleSourceMenuClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = (value?: string) => {\n    if (constants.DATA_SOURCE_ID.some(x => x === value)) {\n      localStorage.setItem(\"SOURCE_ID\", value);\n      setSourceId(value)\n    }\n    setAnchorEl(null);\n  };\n  const reset = () => {\n    setLiveSearch(true);\n    setKeyword(\"\");\n    setData(null);\n    history.push(\"/\");\n  }\n \n  return (\n    <React.Fragment>\n      <Grid container className={classes.container}>\n        <Grid item sm={6} xs={12}>\n          <form onSubmit={handleSubmit}>\n            <Paper className={classes.root}>\n              <IconButton className={classes.iconButton} aria-label=\"menu\" onClick={handleSourceMenuClick} >\n                <MenuIcon />\n              </IconButton>\n              <Menu\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n              >\n                <MenuItem disabled={sourceId === \"html\"} onClick={() => handleClose(\"html\")}>Từ điển 1</MenuItem>\n                <MenuItem disabled={sourceId === \"data\"} onClick={() => handleClose(\"data\")}>Từ điển 2</MenuItem>\n              </Menu>\n              <InputBase\n                value={keyword}\n                onChange={e => setKeyword(e.target.value)}\n                className={classes.input}\n                placeholder={started ? \"Nói từ muốn tìm kiếm\" : \"Nhập từ muốn tìm\"}\n                inputProps={{ \"aria-label\": \"English -> Vietnamese\" }}\n              />\n              {isBrowserSupportSpeech && <IconButton\n                disabled={started}\n                onClick={() => startVoiceInput()}\n                className={classes.iconButton}\n                aria-label=\"voice input\"\n              >\n                <MicIcon color={started ? \"secondary\" : \"inherit\"} />\n              </IconButton>}\n\n\n              <IconButton\n                type=\"submit\"\n                className={classes.iconButton}\n                aria-label=\"search\"\n              >\n                <SearchIcon />\n              </IconButton>\n              <Divider className={classes.divider} orientation=\"vertical\" />\n              <IconButton\n                color=\"primary\"\n                className={classes.iconButton}\n                aria-label=\"directions\"\n                onClick={reset}\n              >\n                <AutorenewIcon />\n              </IconButton>\n            </Paper>\n          </form>\n        </Grid>\n       \n        {dict &&\n          <Grid item sm={6} xs={12} >\n            <ToggleButtonGroup\n              value={type}\n              exclusive\n              onChange={handleTypeChange}\n              style={{ float: \"right\" }}\n              aria-label=\"select dictionary options\"\n            >\n              <ToggleButton value=\"en_vn\" aria-label=\"left aligned\">\n                <TranslateIcon></TranslateIcon> Eng -> Vi &nbsp;\n              </ToggleButton>\n              <ToggleButton value=\"en_en\" aria-label=\"centered\">\n                <SwapHorizIcon /> Eng -> Eng &nbsp;\n              </ToggleButton>\n              <ToggleButton value=\"synonyms\" aria-label=\"right aligned\">\n                <AccountTreeIcon /> Đồng Nghĩa\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </Grid>\n        }\n         <Grid xs={12} item>\n          {autoCompleteLoading && <span>Loading....</span> }\n          {autoCompleteItems.length >0 && autoCompleteItems.map(x => <Link key={x} color=\"primary\" href={x} className={classes.autoComplete} onClick={\n            (e: React.MouseEvent<HTMLAnchorElement>) =>  { e.preventDefault(); search(x)}}>{x}</Link>)\n          }\n        </Grid>\n      </Grid>\n      {dict && (\n        <Grid>\n          <Grid xs={12} item>\n            <Typography variant=\"h3\" component=\"span\">\n              {dict.data ? toProperCase(dict.data.word) : \"\"}\n            </Typography>\n            <Typography variant=\"h4\" component=\"span\">\n              <Box color=\"text.secondary\" component=\"span\">\n                {dict.data && dict.data.pronounce ? `  (${dict.data.pronounce})` : \"\"}\n              </Box>\n            </Typography>\n            <WordSpeaker word={dict.data.word} accents={speakAccents} noStyle={false}></WordSpeaker>\n            <Divider className={classes.divider} />\n            <LinkInterceptor\n              html={dict.data && dict.data.content}\n              onWordClick={onWordClick}\n              onLinkClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\n                e.preventDefault();\n                const arr = e.currentTarget.href.split(\"/\");\n                const word = arr[arr.length - 1];\n                setKeyword(word);\n                search(word);\n              }}\n            />\n            {popupWord && <WordPopup word={popupWord} onClose={() => setPopupWord(null)}></WordPopup>}\n            {dict.suggests && (\n              <Grid>\n                <SuggestionList\n                  suggests={dict.suggests}\n                  setKeyword={setKeyword}\n                  search={search}\n                />\n              </Grid>\n            )}\n          </Grid>\n        </Grid>\n      )}\n\n      {message && (\n        <SnackbarContent className={classes.snackbar}\n          message={\n            <React.Fragment>\n              <Typography variant=\"subtitle2\">{message}</Typography>\n\n              {(suggestionList && suggestionList.length > 0) && <React.Fragment>\n                <span>Có thể bạn quan tâm :</span>\n                {suggestionList.map(x => <Link key={x} style={{ color: \"#fff\", cursor: \"pointer\" }} onClick={() => search(x)}>{x}</Link>)} </React.Fragment>}\n            </React.Fragment>}\n\n          action={<IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={() => setMessage(null)}>\n            <CloseIcon />\n          </IconButton>}>\n\n        </SnackbarContent>\n      )}\n      {liveSearch && <LiveSearch onWordClick={(liveSearchWord) => search(liveSearchWord)}></LiveSearch>}\n    </React.Fragment>\n  );\n};\n\nexport default Home;\n","import autoCompleteService from \"services/autoCompleteService\";\nimport { useEffect, useState } from \"react\";\n\nexport function useAutocomplete(word: string) {\n    const [autoCompleteItems, setAutoCompleteItems] = useState([])\n    const [autoCompleteLoading, setAutoCompleteLoading] = useState(false);\n    useEffect(() => {\n        setAutoCompleteLoading(true);\n        const start = (new Date()).getTime();\n        const results = autoCompleteService.getAutocomplete(word);\n        setAutoCompleteItems(results);\n        console.log(\"auto complete search time(ms)\", (new Date()).getTime() - start)\n        setAutoCompleteLoading(false);\n        return () => {\n\n        }\n    }, [word]);\n\n    return {\n        autoCompleteItems,\n        autoCompleteLoading,setAutoCompleteItems\n    }\n}","import { useState, useEffect } from \"react\";\n\nexport function useDebounce(value: string, delay: number) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] \n  );\n\n  return debouncedValue;\n}","import React from \"react\";\nimport ThemeProvider from './ThemeProvider'\nimport AppBar from 'components/AppBar'\nimport Home from \"containers/Home\"\nimport Container from \"@material-ui/core/Container\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\nconst App: React.FC = () => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <ThemeProvider>\n        <Container fixed  className=\"container-wrapper\">\n          <AppBar />\n          <Container>\n          <Switch>\n            <Route path=\"/:word\">\n              <Home />\n            </Route>\n            <Route path=\"\">\n              <Home />\n            </Route>\n            </Switch>\n            </Container>\n        </Container>\n      </ThemeProvider>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {mode: \"no-cors\"})\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as firebase from \"firebase\";\nimport App from 'common/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css'\nimport autoCompleteService from 'services/autoCompleteService';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC0Afu4UrdUxEXpZSNtTX5dqB7Kiz9h-58\",\n    authDomain: \"vndict-http.firebaseapp.com\",\n    databaseURL: \"https://vndict-http.firebaseio.com\",\n    projectId: \"vndict-http\",\n    storageBucket: \"vndict-http.appspot.com\",\n    messagingSenderId: \"395495785689\",\n    appId: \"1:395495785689:web:becd3318f899758373aac8\",\n    measurementId: \"G-27K3H2BHSN\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  firebase.analytics();\n\n  autoCompleteService.initialize();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}