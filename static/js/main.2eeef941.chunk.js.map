{"version":3,"sources":["common/ThemeProvider/index.tsx","components/AppBar/index.tsx","components/SuggestionList/index.tsx","components/LinkInterceptor.tsx","hooks/useLongPress.ts","services/util.ts","models/IApiResponse.ts","constants.ts","common/WordSpeaker/WordSpeaker.tsx","components/WordPopup/WordPopup.tsx","services/trackingService.ts","services/api.ts","components/LiveSearch/LiveSearch.tsx","hooks/useTracking.ts","hooks/useSpeechInput.ts","services/autoCompleteService.ts","containers/Home.tsx","hooks/useAutoComplete.ts","hooks/useDebounce.ts","common/App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","Theme","children","CssBaseline","ThemeProvider","AppBar","position","Toolbar","IconButton","edge","color","Typography","variant","SuggestionList","suggests","setKeyword","search","classes","useStyles","successtionBox","paddingTop","length","Box","className","suggestList","Divider","component","style","marginTop","List","map","item","ListItem","button","onClick","word","ListItemIcon","ListItemText","primary","makeStyles","backgroundColor","palette","background","paper","spacing","LinkInterceptor","html","onLinkClick","onWordClick","ref","useRef","listeners","wordDdCLickHandle","useCallback","text","doc","document","window","getSelection","toString","selection","type","createRange","longPressHandler","callback","ms","useState","startLongPress","setStartLongPress","useEffect","timerId","setTimeout","clearTimeout","start","stop","onMouseDown","onMouseUp","onMouseLeave","onTouchStart","onTouchEnd","useLongPress","current","push","addEventListener","Array","from","querySelectorAll","forEach","node","removeEventListener","dangerouslySetInnerHTML","__html","toProperCase","input","toUpperCase","substr","isUrlExist","url","a","fetch","method","res","ok","console","log","findPossibleWord","similars","ApiResponseTypes","constants","RESOURCE_URL","process","REACT_APP_RESOURCE_URL","DATA_SOURCE_ID","TRACKING_SERVICE_URL","WORD_LIST_URL","createStyles","speakButton","marginLeft","WordSpeaker","noStyle","accents","sounds","setSounds","verifyExistingResource","items","toLocaleLowerCase","Chip","clickable","disabled","accent","Audio","play","playSound","icon","label","appBar","title","flex","innerBox","padding","WordPopup","onClose","Dialog","fullScreen","innerWidth","open","pronounce","content","e","preventDefault","sendTrack","mean","mode","body","JSON","stringify","fetchWord","source","result","resultType","Success","trim","response","replace","data","parse","Object","keys","Error","suggestions","errorMessage","liveSearchWord","margin","liveSearchContainer","LiveSearch","React","error","setError","loading","setLoading","trackData","setTrackData","now","moment","utc","startOf","format","firebase","database","on","snapshot","val","off","err","useTracking","Grid","key","Zoom","in","size","CircularProgress","w","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","recognition","useSpeechInput","onVoiceInput","onVoiceStarted","isBrowserSupportSpeech","undefined","inputValue","setInputValue","started","setStarted","voiceCallback","continuous","interimResults","lang","onresult","results","transcript","onaudiostart","onend","onerror","startVoiceInput","fuse","isReady","options","this","shouldSort","threshold","location","distance","minMatchCharLength","json","Fuse","x","slice","root","display","alignItems","width","iconButton","divider","height","container","snackbar","dark","autoComplete","Home","localStorage","getItem","history","useHistory","sourceId","setSourceId","setData","popupWord","setPopupWord","keyword","suggestionList","setSuggestionList","setType","message","setMessage","useParams","liveSearch","setLiveSearch","autoCompleteItems","setAutoCompleteItems","autoCompleteLoading","setAutoCompleteLoading","Date","getTime","autoCompleteService","getAutocomplete","useAutocomplete","value","delay","debouncedValue","setDebouncedValue","handler","useDebounce","inputKeyword","scrollTo","top","onVoiceResultCb","voiceStartedCB","clickedWord","en_vn","dict","anchorEl","setAnchorEl","handleClose","some","setItem","Fragment","sm","xs","onSubmit","Paper","event","currentTarget","keepMounted","Boolean","MenuItem","InputBase","onChange","target","placeholder","inputProps","orientation","ToggleButtonGroup","exclusive","dictType","float","ToggleButton","Link","href","arr","split","SnackbarContent","cursor","action","App","basename","Container","fixed","path","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","initialize","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2eeef941.chunk.js","sourcesContent":["import React from \"react\"\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\n\nconst theme = createMuiTheme()\n\nconst Theme: React.FC = ({ children }) => {\n  return (\n    <>\n      <CssBaseline />\n      <ThemeProvider theme={theme}>\n        {children}\n      </ThemeProvider>\n    </>\n  )\n}\n\nexport default Theme\n\n\n\n","import React from \"react\"\n\nimport MuiAppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\n\nimport MenuBookIcon from '@material-ui/icons/MenuBook'\n\nconst AppBar: React.FC = () => {\n  return (\n    <MuiAppBar position=\"static\">\n      <Toolbar>\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n          <MenuBookIcon />\n        </IconButton>\n        <Typography variant=\"h6\">Vietnamese - English open dictionary</Typography>\n      </Toolbar>\n    </MuiAppBar>\n  )\n}\n\nexport default AppBar","import React from 'react'\n\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\n\nimport Typography from \"@material-ui/core/Typography\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport LabelImportantIcon from \"@material-ui/icons/LabelImportant\"\nimport { Box, Divider } from '@material-ui/core'\n\ninterface SuggestionListProps {\n  suggests: any[],\n  setKeyword?: any\n  search?: any\n}\n\nconst SuggestionList: React.FC<SuggestionListProps> = ({ suggests, setKeyword, search }) => {\n  const classes = useStyles({ successtionBox: {paddingTop: \"25px\"}})\n \n  return suggests && suggests.length >0 && (\n    <Box className= {classes.suggestList}>\n      <Divider/>\n      <Typography variant=\"h3\" component=\"h5\" style={{marginTop:\"25px\"}}>\n        Từ liên quan:\n      </Typography>\n      <List\n        component=\"nav\"\n        aria-label=\"contacts\"\n      >\n        {suggests.map((item: any) => (\n          <ListItem\n            key={item.word}\n            button\n            onClick={() => {\n              setKeyword(item.word)\n              search(item.word)\n            }}\n          >\n            <ListItemIcon>\n              <LabelImportantIcon />\n            </ListItemIcon>\n            <ListItemText primary={item.word} color=\"primary\" />\n          </ListItem>\n        ))}\n      </List>\n    </Box>\n  )\n}\n\nexport default SuggestionList\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  suggestList: {\n    backgroundColor: theme.palette.background.paper,\n    marginTop: theme.spacing(5)\n  }\n}))","import React, { useEffect, useRef, useCallback } from 'react'\nimport { Typography } from '@material-ui/core'\nimport useLongPress from \"hooks/useLongPress\";\nexport interface IInterceptionProps {\n  html: string;\n  onLinkClick: (e: any) => any;\n  onWordClick?: (e: string) => void;\n}\nexport function LinkInterceptor({ html, onLinkClick, onWordClick }: IInterceptionProps) {\n  const ref = useRef(null)\n  const listeners = useRef([])\n  const wordDdCLickHandle = useCallback(() => {\n    let text = \"\";\n    const doc = document as any;\n\n    if (window.getSelection) {\n      text = window.getSelection().toString();\n    } else if (doc.selection && doc.selection.type !== \"Control\") {\n      text = doc.selection.createRange().text;\n    }\n    if (text && onWordClick) {\n      onWordClick(text);\n    }\n  }, [onWordClick]);\n  const longPressHandler = useLongPress(() => {\n    wordDdCLickHandle();\n  }, 1000)\n\n  useEffect(\n    () => {\n      listeners.current.push(ref.current);\n      ref.current.addEventListener(\"dblclick\", wordDdCLickHandle)\n      const links: HTMLElement[] = Array.from(ref.current.querySelectorAll('a'))\n      links.forEach(node => {\n        node.addEventListener('click', onLinkClick)\n        listeners.current.push(node)\n      })\n\n      return () => {\n        listeners.current.forEach(node => {\n          node.removeEventListener('click', onLinkClick);\n          node.removeEventListener('dblclick', wordDdCLickHandle);\n        });\n        listeners.current = []\n      }\n    },\n    [html, onLinkClick, onWordClick, wordDdCLickHandle]\n  )\n\n  return <Typography {...longPressHandler} ref={ref} variant=\"body1\" component=\"article\" dangerouslySetInnerHTML={{ __html: html }}></Typography>\n}","import { useState, useEffect, useCallback } from 'react';\n\nexport default function useLongPress(callback = () => { }, ms = 300) {\n  const [startLongPress, setStartLongPress] = useState(false);\n\n  useEffect(() => {\n    let timerId: any;\n    if (startLongPress) {\n      timerId = setTimeout(callback, ms);\n    } else {\n      clearTimeout(timerId);\n    }\n\n    return () => {\n      clearTimeout(timerId);\n    };\n    // eslint-disable-next-line\n  }, [startLongPress]);\n\n  const start = useCallback(() => {\n    setStartLongPress(true);\n  }, []);\n  const stop = useCallback(() => {\n    setStartLongPress(false);\n  }, []);\n\n  return {\n\n    onMouseDown: start,\n    onMouseUp: stop,\n    onMouseLeave: stop,\n    onTouchStart: start,\n    onTouchEnd: stop,\n  };\n}","\nexport function toProperCase(input: string) {\n  if (!input) return null;\n  input = input[0].toUpperCase() + input.substr(1);\n  return input;\n}\n\nexport async function isUrlExist(url: string) {\n  try {\n    const res = await fetch(url, { method: 'HEAD' });\n    if (res && res.ok) {\n      return true;\n    }\n  }\n  catch (err) {\n    console.log(err);\n  };\n  return false;\n}\nexport function findPossibleWord(word: string){\n  const similars = [];\n  // remove s at the end\n  if(word[word.length-1] === 's') {\n    similars.push(word.substr(0,word.length -1))\n  }\n  return similars;\n}","export enum ApiResponseTypes {\n  Success = \"success\",\n  Error = \"error\"\n}\nexport interface IApiResponse<T> {\n  data?: T\n  resultType: ApiResponseTypes,\n  errorMessage?: string;\n  suggestions?: string[];\n}","export const constants = {\n  RESOURCE_URL: process.env.REACT_APP_RESOURCE_URL || \"https://samuraitruong.github.io/open-vn-en-dict/\",\n  DATA_SOURCE_ID: [\"data\", \"html\"],\n  TRACKING_SERVICE_URL: \"https://us-central1-vndict-http.cloudfunctions.net/track\",\n  WORD_LIST_URL: \"/words_dictionary.json\"\n}\nexport default constants;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { Box, Chip, makeStyles, Theme, createStyles } from \"@material-ui/core\";\nimport VolumeDownIcon from \"@material-ui/icons/VolumeDown\";\n// import VolumeUpIcon from \"@material-ui/icons/VolumeUp\";\nimport { constants } from \"../../constants\";\nimport { isUrlExist } from \"services/util\";\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    speakButton: {\n      marginLeft: theme.spacing(3)\n    }\n  })\n);\nexport interface IWordSpeakerProps {\n  word: string;\n  accents?: string[];\n  noStyle?: boolean;\n}\nexport const WordSpeaker: React.FC<IWordSpeakerProps> = ({ noStyle, word, accents }) => {\n  const classes = useStyles({});\n  const initialSound: { [x: string]: string } = {}\n  const [sounds, setSounds] = useState(initialSound);\n  //TODO : Fix the react warning, somehow it complaint about accents\n  const verifyExistingResource = useCallback(async () => {\n    const items: { [x: string]: string } = {};\n    if (word) {\n      for (const item of accents) {\n        const url = `${constants.RESOURCE_URL}/voice/${word.toLocaleLowerCase()}_${item}.mp3`;\n        const existed = await isUrlExist(url);\n        if (existed) {\n          items[item] = url;\n        }\n      }\n    }\n    setSounds(items);\n    // eslint-disable-next-line\n  }, [word])\n  useEffect(() => {\n    verifyExistingResource();\n  }, [verifyExistingResource]);\n  const playSound = (accent?: \"us\" | \"uk\") => {\n    const url = `${constants.RESOURCE_URL}/voice/${word.toLocaleLowerCase()}_${accent}.mp3`;\n    const audio = new Audio(url);\n    audio.play();\n  };\n  return (\n    <Box className=\"float-right\">\n      {accents.map((a) =>\n        <Chip key={a}\n          className={classes.speakButton}\n          clickable={sounds[a] != null}\n          disabled={!sounds[a]}\n          color={(!noStyle && a === \"us\") ? \"secondary\" : \"primary\"}\n          onClick={() => playSound(a as \"uk\" | \"us\")}\n          icon={<VolumeDownIcon />}\n          label={a.toUpperCase()}\n        />\n      )}\n    </Box>\n  )\n}\n\nexport default WordSpeaker;","import {\n  Dialog,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  makeStyles,\n  Theme,\n  createStyles,\n  Box,\n} from '@material-ui/core';\n\nimport React from 'react';\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport { LinkInterceptor } from 'components/LinkInterceptor';\nimport { toProperCase } from 'services/util';\nimport WordSpeaker from 'common/WordSpeaker/WordSpeaker';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      position: 'relative',\n    },\n    title: {\n      marginLeft: theme.spacing(2),\n      flex: 1,\n    },\n    innerBox: {\n      padding: theme.spacing(2),\n    },\n  }),\n);\n\nexport const WordPopup: React.FC<{ word: any; onClose: () => void }> = ({\n  word,\n  onClose,\n}) => {\n  const classes = useStyles({});\n\n  const handleClose = () => onClose();\n  if (!word) return null;\n\n  return (\n    <Dialog\n      fullScreen={window.innerWidth < 667}\n      open={word != null}\n      onClose={() => {}}\n    >\n      <AppBar className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            edge='start'\n            color='inherit'\n            onClick={handleClose}\n            aria-label='close'\n          >\n            <CloseIcon />\n          </IconButton>\n          <Typography variant='h6' className={classes.title}>\n            {toProperCase(word.word)}{' '}\n            {word.pronounce && <span> - {word.pronounce}</span>}\n          </Typography>\n          <WordSpeaker\n            word={word.word}\n            accents={['us', 'uk']}\n            noStyle={true}\n          ></WordSpeaker>\n        </Toolbar>\n      </AppBar>\n      <Box className={classes.innerBox}>\n        <LinkInterceptor\n          html={word.content}\n          onLinkClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\n            e.preventDefault();\n          }}\n        ></LinkInterceptor>\n      </Box>\n    </Dialog>\n  );\n};\n","import constants from \"../constants\";\n\nexport async function sendTrack(word: string, mean?: string) {\n    mean = mean|| word;\n    try{\n    await fetch(constants.TRACKING_SERVICE_URL, {method: \"POST\", mode:\"no-cors\", body: JSON.stringify({word, mean})});\n    }catch(err) {\n        console.log(err)\n    }\n}","import { IApiResponse, ApiResponseTypes } from \"models/IApiResponse\";\nimport { constants } from \"../constants\";\nimport { sendTrack } from \"./trackingService\";\nimport { findPossibleWord } from \"./util\";\n\nexport async function fetchWord(word: string, source: string): Promise<IApiResponse<any>> {\n  source = source || \"html\";\n  let result: IApiResponse<any> = {\n    resultType: ApiResponseTypes.Success\n  }\n  try {\n    word = word.toLocaleLowerCase().trim();\n    const response = await fetch(`${constants.RESOURCE_URL}/${source}/${word}.json`);\n    let text = await response.text();\n    text = text.replace(\n      /find\\?type=(\\d+)&amp;query=([^\"]*)/ig,\n      \"$2\"\n    );\n    result.data = JSON.parse(text);\n    if(Object.keys(result.data).length === 0) {\n      \n      throw new Error(\"Word data is empty\")\n    }\n    sendTrack(word);\n  }\n  catch (err) {\n    console.log(err);\n    const similars = findPossibleWord(word);\n      if(similars.length >0) {\n        result.suggestions = similars;\n    }\n    result.resultType = ApiResponseTypes.Error;\n    result.errorMessage = \"failed to fetch word\";\n  }\n  return result;\n}","import React from \"react\";\nimport { useTracking } from \"hooks/useTracking\";\nimport {\n  Chip,\n  makeStyles,\n  Theme,\n  createStyles,\n  Grid,\n  Typography,\n  Zoom,\n  CircularProgress\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    liveSearchWord: {\n      margin: theme.spacing(1)\n    },\n    liveSearchContainer: {\n      marginTop: theme.spacing(2)\n    }\n  })\n);\n\nexport interface ILiveSearchProps {\n  onWordClick: (word: string) => void;\n}\nconst LiveSearch: React.FC<ILiveSearchProps> = ({ onWordClick }) => {\n  const { trackData, error, loading } = useTracking();\n  const classes = useStyles({});\n  return (\n    <Grid className={classes.liveSearchContainer}>\n      <Typography variant=\"h5\" color=\"primary\">Tìm kiếm gần nhất ....</Typography>\n      {\n      trackData? Object.keys(trackData).map(key => {\n        return (\n          <Zoom in={true} key={key}>\n            <Chip\n              label={key}\n              className={classes.liveSearchWord}\n              clickable\n              onClick={() => onWordClick(key)}\n              size=\"small\"\n              color=\"primary\"\n            />\n          </Zoom>\n        );\n      }): <span>Chưa có dữ liệu</span>}\n      {loading && <CircularProgress color=\"secondary\" />}\n      {error && <span>Xin lỗi, đã xãy ra lỗi kết nối với máy chủ, vui lòng thử lại sau.</span>}\n    </Grid>\n  );\n};\nexport default LiveSearch;\n","import React, { useEffect } from \"react\";\nimport firebase from \"firebase\";\nimport moment from \"moment\";\n\nexport interface ITracking {\n  [key: string]: string;\n}\nexport function useTracking() {\n  // initialize our default state\n  const defaultList: ITracking = {};\n  const [error, setError] = React.useState(false);\n  const [loading, setLoading] = React.useState(true)\n  const [trackData, setTrackData] = React.useState(defaultList)\n  useEffect(\n    () => {\n      try {\n        const now = moment().utc().startOf(\"day\").format(\"YYYYMMDD\")\n        const ref = firebase.database().ref('/' + now);\n        ref.on(\"value\", (snapshot) => {\n          setLoading(false);\n          setTrackData(snapshot.val());\n        });\n        return () => {\n          ref.off(\"value\")\n        }\n      }\n      catch (err) {\n        setError(true);\n      }\n\n    }, []\n  )\n\n  return {\n    error,\n    loading,\n    trackData,\n  }\n}\n","import { useState, useEffect, useCallback } from \"react\";\n// TODO move this to inside hook???\nconst w = window as any;\nconst SpeechRecognition = w.webkitSpeechRecognition ||\n  w.mozSpeechRecognition ||\n  w.msSpeechRecognition ||\n  w.oSpeechRecognition ||\n  w.SpeechRecognition;\n\nconst recognition = SpeechRecognition && new SpeechRecognition();\n\nconst useSpeechInput = (onVoiceInput: (w: string) => void, onVoiceStarted?: () => void) => {\n  const isBrowserSupportSpeech = SpeechRecognition !== null && SpeechRecognition !== undefined;\n  const [inputValue, setInputValue] = useState(\"\");\n  const [started, setStarted] = useState(false);\n\n  const startVoiceInput = () => {\n    if (!recognition) return;\n    recognition.start();\n\n  }\n  const voiceCallback = useCallback(() => {\n    if (!recognition) {\n      return;\n    }\n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.lang = \"en-US\";\n\n    recognition.onresult = (e: any) => {\n      setInputValue(e.results[0][0].transcript);\n      onVoiceInput(e.results[0][0].transcript)\n      recognition.stop();\n    };\n\n    recognition.onaudiostart = () => {\n      if (onVoiceStarted) onVoiceStarted();\n      setStarted(true);\n    }\n    recognition.onend = () => {\n      setStarted(false);\n    }\n\n    recognition.onerror = (e: any) => {\n      recognition.stop();\n    }\n\n  }, [onVoiceInput, onVoiceStarted])\n  useEffect(() => {\n    voiceCallback()\n    return () => {\n      if (recognition && started)\n        recognition.stop()\n    }\n\n  }, [voiceCallback, started])\n\n  return {\n    started,\n    inputValue,\n    startVoiceInput,\n    isBrowserSupportSpeech\n  }\n}\n\nexport default useSpeechInput;","import Fuse from \"fuse.js\";\nimport constants from \"../constants\";\n\ntype EnglishWordFuse = {\n    title: string;\n}\nclass AutoCompleteService {\n    private fuse: Fuse<EnglishWordFuse>;\n    private isReady: boolean = false;\n    private options: Fuse.IFuseOptions<EnglishWordFuse>;\n    constructor() {\n        this.options = {\n            shouldSort: true,\n            threshold: 0.05,\n            location: 0,\n            distance: 100,\n            // maxPatternLength: 32,\n            minMatchCharLength: 3,\n            keys: [\n                \"title\",\n            ]\n        };\n    }\n    public async initialize() {\n        const res = await fetch(constants.WORD_LIST_URL, { mode: \"no-cors\" });\n        const json = await res.json();\n        const data: EnglishWordFuse[] = Object.keys(json).map(key => { return { title: key } });\n\n        this.fuse = new Fuse(data, this.options); // \"list\" is the item array\n        console.log(\"auto complete service initialized\");\n        this.isReady = true;\n    }\n    public getAutocomplete(word: string) {\n        if (!word || !this.isReady || word.length < 3) return [];\n        const results: any[] = this.fuse.search(word);\n        const arr = results.map(x => x.title);\n        return arr.slice(0, 10);\n    }\n}\n//this is singleton\nexport default new AutoCompleteService();\n","import React, { useState, FormEvent, useEffect, useCallback } from 'react';\n\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nimport SuggestionList from 'components/SuggestionList';\n\nimport Typography from '@material-ui/core/Typography';\n\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputBase from '@material-ui/core/InputBase';\nimport Divider from '@material-ui/core/Divider';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\n\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\nimport CloseIcon from '@material-ui/icons/Close';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport { LinkInterceptor } from 'components/LinkInterceptor';\nimport { useParams, useHistory } from 'react-router';\nimport { WordPopup } from 'components/WordPopup/WordPopup';\nimport { fetchWord } from 'services/api';\nimport { toProperCase } from 'services/util';\nimport constants from '../constants';\nimport { Menu, MenuItem, Link } from '@material-ui/core';\nimport { WordSpeaker } from 'common/WordSpeaker/WordSpeaker';\nimport LiveSearch from 'components/LiveSearch/LiveSearch';\nimport useSpeechInput from 'hooks/useSpeechInput';\nimport MicIcon from '@material-ui/icons/Mic';\nimport { useAutocomplete } from 'hooks/useAutoComplete';\nimport { useDebounce } from 'hooks/useDebounce';\n\ninterface PageParams {\n  word?: string;\n}\ninterface DictData {}\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: '2px 4px',\n      display: 'flex',\n      alignItems: 'center',\n      width: '100%',\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1,\n    },\n    iconButton: {\n      padding: 10,\n    },\n    divider: {\n      height: 1,\n      marginTop: theme.spacing(1),\n    },\n    container: {\n      margin: theme.spacing(1, 0),\n      paddingTop: theme.spacing(2),\n    },\n    speakButton: {\n      marginLeft: theme.spacing(3),\n    },\n    snackbar: {\n      backgroundColor: theme.palette.error.dark,\n    },\n    autoComplete: {\n      margin: theme.spacing(1),\n    },\n  }),\n);\n\nconst Home: React.FC = () => {\n  const source = localStorage.getItem('SOURCE_ID') || 'html';\n  const speakAccents = ['uk', 'us'];\n  let history = useHistory();\n  const classes = useStyles({});\n  const [sourceId, setSourceId] = useState(source);\n  const [data, setData] = useState<DictData>();\n  const [popupWord, setPopupWord] = useState(null);\n  const [keyword, setKeyword] = useState('');\n  const [suggestionList, setSuggestionList] = useState([]);\n  const [type, setType] = useState('en_vn');\n  const [message, setMessage] = useState(null);\n  const { word } = useParams<PageParams>();\n  const [liveSearch, setLiveSearch] = useState(true);\n  const autocomplete = useDebounce(keyword, 500);\n  const { autoCompleteItems, autoCompleteLoading, setAutoCompleteItems } =\n    useAutocomplete(autocomplete);\n\n  const search = useCallback(\n    async (inputKeyword: string) => {\n      if (!inputKeyword) return;\n      const { data, suggestions } = await fetchWord(inputKeyword, sourceId);\n\n      if (data) {\n        setLiveSearch(false);\n        setType('en_vn');\n        setData(data);\n        setMessage(null);\n        history.push(inputKeyword);\n        window.scrollTo({ top: 0 });\n      } else {\n        setLiveSearch(true);\n        setData({});\n        setSuggestionList(suggestions);\n        setMessage(\n          'Xin lỗi, từ bạn tìm kiếm không tồn tại hoặc chưa được cập nhật',\n        );\n      }\n      setAutoCompleteItems([]);\n    },\n    [history, sourceId, setAutoCompleteItems],\n  );\n  const onVoiceResultCb = useCallback(\n    (input) => {\n      setKeyword(input);\n      search(input);\n    },\n    [search],\n  );\n  const voiceStartedCB = useCallback(() => {\n    setKeyword('');\n  }, []);\n\n  const { isBrowserSupportSpeech, startVoiceInput, started } = useSpeechInput(\n    onVoiceResultCb,\n    voiceStartedCB,\n  );\n  const onWordClick = async (clickedWord: string) => {\n    const response = await fetchWord(clickedWord, sourceId);\n    if (response.data && response.data.en_vn && response.data.en_vn.data) {\n      setPopupWord(response.data.en_vn.data);\n    }\n  };\n  useEffect(() => {\n    setKeyword(word);\n    search(word);\n  }, [word, search]);\n\n  const dict = data && (data as any)[type];\n  const handleTypeChange = (\n    event: React.MouseEvent<HTMLElement>,\n    dictType: string,\n  ) => {\n    setType(dictType);\n  };\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    search(keyword);\n    return false;\n  };\n\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleSourceMenuClick = (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = (value?: string) => {\n    if (constants.DATA_SOURCE_ID.some((x) => x === value)) {\n      localStorage.setItem('SOURCE_ID', value);\n      setSourceId(value);\n    }\n    setAnchorEl(null);\n  };\n  const reset = () => {\n    setLiveSearch(true);\n    setKeyword('');\n    setData(null);\n    history.push('/');\n  };\n\n  return (\n    <React.Fragment>\n      <Grid container className={classes.container}>\n        <Grid item sm={6} xs={12}>\n          <form onSubmit={handleSubmit}>\n            <Paper className={classes.root}>\n              <IconButton\n                className={classes.iconButton}\n                aria-label='menu'\n                onClick={handleSourceMenuClick}\n              >\n                <MenuIcon />\n              </IconButton>\n              <Menu\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n              >\n                <MenuItem\n                  disabled={sourceId === 'html'}\n                  onClick={() => handleClose('html')}\n                >\n                  Từ điển 1\n                </MenuItem>\n                <MenuItem\n                  disabled={sourceId === 'data'}\n                  onClick={() => handleClose('data')}\n                >\n                  Từ điển 2\n                </MenuItem>\n              </Menu>\n              <InputBase\n                value={keyword}\n                onChange={(e) => setKeyword(e.target.value)}\n                className={classes.input}\n                placeholder={\n                  started ? 'Nói từ muốn tìm kiếm' : 'Nhập từ muốn tìm'\n                }\n                inputProps={{ 'aria-label': 'English -> Vietnamese' }}\n              />\n              {isBrowserSupportSpeech && (\n                <IconButton\n                  disabled={started}\n                  onClick={() => startVoiceInput()}\n                  className={classes.iconButton}\n                  aria-label='voice input'\n                >\n                  <MicIcon color={started ? 'secondary' : 'inherit'} />\n                </IconButton>\n              )}\n\n              <IconButton\n                type='submit'\n                className={classes.iconButton}\n                aria-label='search'\n              >\n                <SearchIcon />\n              </IconButton>\n              <Divider className={classes.divider} orientation='vertical' />\n              <IconButton\n                color='primary'\n                className={classes.iconButton}\n                aria-label='directions'\n                onClick={reset}\n              >\n                <AutorenewIcon />\n              </IconButton>\n            </Paper>\n          </form>\n        </Grid>\n\n        {dict && (\n          <Grid item sm={6} xs={12}>\n            <ToggleButtonGroup\n              value={type}\n              exclusive\n              onChange={handleTypeChange}\n              style={{ float: 'right' }}\n              aria-label='select dictionary options'\n            >\n              <ToggleButton value='en_vn' aria-label='left aligned'>\n                <TranslateIcon></TranslateIcon> {'Eng -> Vi'} &nbsp;\n              </ToggleButton>\n              <ToggleButton value='en_en' aria-label='centered'>\n                <SwapHorizIcon /> {'Eng -> Eng'} &nbsp;\n              </ToggleButton>\n              <ToggleButton value='synonyms' aria-label='right aligned'>\n                <AccountTreeIcon /> Đồng Nghĩa\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </Grid>\n        )}\n        <Grid xs={12} item container>\n          {autoCompleteLoading && <span>Loading....</span>}\n          {autoCompleteItems.length > 0 &&\n            autoCompleteItems.map((x) => (\n              <Link\n                key={x}\n                color='primary'\n                href={x}\n                className={classes.autoComplete}\n                onClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\n                  e.preventDefault();\n                  search(x);\n                }}\n              >\n                {x}\n              </Link>\n            ))}\n        </Grid>\n      </Grid>\n      {dict && (\n        <Grid>\n          <Grid xs={12} item>\n            <Typography variant='h3' component='span'>\n              {dict.data ? toProperCase(dict.data.word) : ''}\n            </Typography>\n            <Typography variant='h4' component='span'>\n              <Box color='text.secondary' component='span'>\n                {dict.data && dict.data.pronounce\n                  ? `  (${dict.data.pronounce})`\n                  : ''}\n              </Box>\n            </Typography>\n            <WordSpeaker\n              word={dict.data.word}\n              accents={speakAccents}\n              noStyle={false}\n            ></WordSpeaker>\n            <Divider className={classes.divider} />\n            <LinkInterceptor\n              html={dict.data && dict.data.content}\n              onWordClick={onWordClick}\n              onLinkClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\n                e.preventDefault();\n                const arr = e.currentTarget.href.split('/');\n                const word = arr[arr.length - 1];\n                setKeyword(word);\n                search(word);\n              }}\n            />\n            {popupWord && (\n              <WordPopup\n                word={popupWord}\n                onClose={() => setPopupWord(null)}\n              ></WordPopup>\n            )}\n            {dict.suggests && (\n              <Grid>\n                <SuggestionList\n                  suggests={dict.suggests}\n                  setKeyword={setKeyword}\n                  search={search}\n                />\n              </Grid>\n            )}\n          </Grid>\n        </Grid>\n      )}\n\n      {message && (\n        <SnackbarContent\n          className={classes.snackbar}\n          message={\n            <React.Fragment>\n              <Typography variant='subtitle2'>{message}</Typography>\n\n              {suggestionList && suggestionList.length > 0 && (\n                <React.Fragment>\n                  <span>Có thể bạn quan tâm :</span>\n                  {suggestionList.map((x) => (\n                    <Link\n                      key={x}\n                      style={{ color: '#fff', cursor: 'pointer' }}\n                      onClick={() => search(x)}\n                    >\n                      {x}\n                    </Link>\n                  ))}{' '}\n                </React.Fragment>\n              )}\n            </React.Fragment>\n          }\n          action={\n            <IconButton\n              key='close'\n              aria-label='close'\n              color='inherit'\n              onClick={() => setMessage(null)}\n            >\n              <CloseIcon />\n            </IconButton>\n          }\n        ></SnackbarContent>\n      )}\n      {liveSearch && (\n        <LiveSearch\n          onWordClick={(liveSearchWord) => search(liveSearchWord)}\n        ></LiveSearch>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default Home;\n","import autoCompleteService from \"services/autoCompleteService\";\nimport { useEffect, useState } from \"react\";\n\nexport function useAutocomplete(word: string) {\n    const [autoCompleteItems, setAutoCompleteItems] = useState([])\n    const [autoCompleteLoading, setAutoCompleteLoading] = useState(false);\n    useEffect(() => {\n        setAutoCompleteLoading(true);\n        const start = (new Date()).getTime();\n        const results = autoCompleteService.getAutocomplete(word);\n        setAutoCompleteItems(results);\n        console.log(\"auto complete search time(ms)\", (new Date()).getTime() - start)\n        setAutoCompleteLoading(false);\n        return () => {\n\n        }\n    }, [word]);\n\n    return {\n        autoCompleteItems,\n        autoCompleteLoading,setAutoCompleteItems\n    }\n}","import { useState, useEffect } from \"react\";\n\nexport function useDebounce(value: string, delay: number) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] \n  );\n\n  return debouncedValue;\n}","import React from \"react\";\nimport ThemeProvider from './ThemeProvider'\nimport AppBar from 'components/AppBar'\nimport Home from \"containers/Home\"\nimport Container from \"@material-ui/core/Container\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\nconst App: React.FC = () => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <ThemeProvider>\n        <Container fixed  className=\"container-wrapper\">\n          <AppBar />\n          <Container>\n          <Switch>\n            <Route path=\"/:word\">\n              <Home />\n            </Route>\n            <Route path=\"\">\n              <Home />\n            </Route>\n            </Switch>\n            </Container>\n        </Container>\n      </ThemeProvider>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {mode: \"no-cors\"})\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport firebase from 'firebase';\nimport App from 'common/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport autoCompleteService from 'services/autoCompleteService';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyC0Afu4UrdUxEXpZSNtTX5dqB7Kiz9h-58',\n  authDomain: 'vndict-http.firebaseapp.com',\n  databaseURL: 'https://vndict-http.firebaseio.com',\n  projectId: 'vndict-http',\n  storageBucket: 'vndict-http.appspot.com',\n  messagingSenderId: '395495785689',\n  appId: '1:395495785689:web:becd3318f899758373aac8',\n  measurementId: 'G-27K3H2BHSN',\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nautoCompleteService.initialize();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}